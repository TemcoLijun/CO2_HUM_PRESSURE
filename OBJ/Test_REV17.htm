<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\Test_REV17.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\Test_REV17.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Oct 28 17:42:36 2016
<BR><P>
<H3>Maximum Stack Usage =       4416 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; mass_flash_init &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[34]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[252]">bin_search</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[252]">bin_search</a><BR>
 <LI><a href="#[217]">check_master_id_in_database</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[217]">check_master_id_in_database</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[34]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">About_display</a> from menuabout.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[16]">About_init</a> from menuabout.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[15]">About_keycope</a> from menuabout.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1c]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">Co2_Conf_display</a> from menuco2_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[7]">Co2_Conf_init</a> from menuco2_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[6]">Co2_Conf_keycope</a> from menuco2_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[5]">Co2_Main_display</a> from menumain.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[4]">Co2_Main_init</a> from menumain.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[3]">Co2_Main_keycope</a> from menumain.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[b]">Co2_Opt_display</a> from menuco2_opt.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[a]">Co2_Opt_init</a> from menuco2_opt.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[9]">Co2_Opt_keycope</a> from menuco2_opt.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[29c]">CursorTask</a> from menu.o(.text) referenced from menu.o(.text)
 <LI><a href="#[2d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">Hum_Conf_display</a> from menuhum_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[10]">Hum_Conf_init</a> from menuhum_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[f]">Hum_Conf_keycope</a> from menuhum_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[42]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">Idle_display</a> from menuidle.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1]">Idle_init</a> from menuidle.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[0]">Idle_keycope</a> from menuidle.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[1b]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[298]">MenuTask</a> from menu.o(.text) referenced from menu.o(.text)
 <LI><a href="#[14]">Misc_display</a> from menumisc.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[13]">Misc_init</a> from menumisc.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[12]">Misc_keycope</a> from menumisc.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[19]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25e]">ParameterOperationTask</a> from scan.o(.text) referenced from scan.o(.text)
 <LI><a href="#[27]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25c]">ScanTask</a> from scan.o(.text) referenced from scan.o(.text)
 <LI><a href="#[29b]">ScrollingTask</a> from menu.o(.text) referenced from menu.o(.text)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[24]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM3_IRQHandler</a> from timerx.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">TIM6_IRQHandler</a> from timerx.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[59]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">Temp_Conf_display</a> from menutemp_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[d]">Temp_Conf_init</a> from menutemp_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[c]">Temp_Conf_keycope</a> from menutemp_conf.o(.text) referenced 2 times from menu.o(.data)
 <LI><a href="#[56]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">USART1_IRQHandler</a> from modbus.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from sub_net.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">USART3_IRQHandler</a> from subnet_scan.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[60]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[6b]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[6c]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[6a]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[6f]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[6e]">fputc</a> from fputc.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[6d]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[5e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[69]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[63]">vCOMMTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[66]">vFlashTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[68]">vKEYTask</a> from key.o(.text) referenced from main.o(.text)
 <LI><a href="#[62]">vMSTP_TASK</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[61]">vNETTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[67]">vOutPutTask</a> from analog_output.o(.text) referenced from main.o(.text)
 <LI><a href="#[1e]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">vStartPIDTask</a> from pid.o(.text) referenced from main.o(.text)
 <LI><a href="#[64]">vUpdate_Temperature_Task</a> from temperature.o(.text) referenced from main.o(.text)
 <LI><a href="#[20]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">xPortSysTickHandler</a> from port.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[435]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[70]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[436]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[437]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[438]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[439]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[43a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[101]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_load_app
</UL>

<P><STRONG><a name="[1e]"></a>vPortSVCHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c6]"></a>vPortStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[20]"></a>xPortPendSVHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>vPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>vPortClearInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[43d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>Inital_Bacnet_Server</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Inital_Bacnet_Server &rArr; Set_Object_Name &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_broadcast_addr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_Object_Instance_Number
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
</UL>

<P><STRONG><a name="[8b]"></a>uip_polling</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = uip_polling &rArr; uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_timer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
</UL>

<P><STRONG><a name="[99]"></a>watchdog</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>EEP_Dat_Init</STRONG> (Thumb, 2516 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EEP_Dat_Init &rArr; initial_hum_eep &rArr; reset_to_factory &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_hum_eep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>main</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4416<LI>Call Chain = main &rArr; mass_flash_init &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMenuTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[43e]"></a>swap_int16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>swap_int32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[19]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NMI_Handler &rArr; print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HardFault_Handler &rArr; print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemManage_Handler &rArr; print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BusFault_Handler &rArr; print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UsageFault_Handler &rArr; print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>SVC_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[1f]"></a>DebugMon_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DebugMon_Handler &rArr; print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>PendSV_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[b6]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[440]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
</UL>

<P><STRONG><a name="[a8]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[441]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[17f]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[443]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[181]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[444]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[184]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[185]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[186]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[187]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[445]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[448]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[449]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[44d]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[455]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[17c]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[45d]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[45e]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bc]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[df]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gpio_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Input_Initial
</UL>

<P><STRONG><a name="[465]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P3_0
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P3_1
</UL>

<P><STRONG><a name="[159]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[466]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gpio_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
</UL>

<P><STRONG><a name="[120]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
</UL>

<P><STRONG><a name="[468]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_config
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[46d]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[a5]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[a6]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[9a]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[a7]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
</UL>

<P><STRONG><a name="[46f]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[bd]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[472]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[475]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[14b]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[47d]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[14d]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[17a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[76]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gpio_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Input_Initial
</UL>

<P><STRONG><a name="[f5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[ba]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[c5]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[dc]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[47e]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[480]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>RTC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c0]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[c1]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[148]"></a>RTC_GetCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[bf]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[c2]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[c3]"></a>RTC_SetAlarm</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[482]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[14e]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[483]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>RTC_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>RTC_GetITStatus</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[f1]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[c6]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[485]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[487]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[ee]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[48a]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[48c]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[48d]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>

<P><STRONG><a name="[492]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[115]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[116]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[117]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[495]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[cf]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[cd]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[cb]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c9]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[d2]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[496]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[497]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[498]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[49b]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Int_Init
</UL>

<P><STRONG><a name="[49c]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49e]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[49f]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[d3]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[d5]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[d7]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[d6]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[d8]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[4a0]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a2]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a6]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4aa]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[119]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[11a]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[4ab]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ac]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ad]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4af]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b0]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b8]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ba]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4bb]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4bd]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4be]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4bf]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c5]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
</UL>

<P><STRONG><a name="[11d]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
</UL>

<P><STRONG><a name="[11e]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
</UL>

<P><STRONG><a name="[4c7]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[4cf]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[da]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[4d1]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[1c7]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRI_USART3_SendDataString
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_USART_SendDataString
</UL>

<P><STRONG><a name="[4d4]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d5]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[4da]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[20b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[4e4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[4e5]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[151]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_bkp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[4ea]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_bkp.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[145]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[4ee]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>SDA_IN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
</UL>

<P><STRONG><a name="[e1]"></a>SDA_OUT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>

<P><STRONG><a name="[e2]"></a>IIC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[e3]"></a>IIC_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Start &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[e5]"></a>IIC_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Stop &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[e6]"></a>IIC_Wait_Ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[e7]"></a>IIC_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Ack &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[e8]"></a>IIC_NAck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[e9]"></a>IIC_Send_Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Send_Byte &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[ea]"></a>IIC_Read_Byte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[eb]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
</UL>

<P><STRONG><a name="[ef]"></a>SPI1_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[af]"></a>SPI1_Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_Init &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>SPI2_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[f3]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[f4]"></a>SPI2_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>

<P><STRONG><a name="[218]"></a>STMFLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
</UL>

<P><STRONG><a name="[219]"></a>STMFLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
</UL>

<P><STRONG><a name="[f7]"></a>STMFLASH_GetStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>

<P><STRONG><a name="[f6]"></a>STMFLASH_WaitDone</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetStatus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
</UL>

<P><STRONG><a name="[f8]"></a>STMFLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMFLASH_ErasePage &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
</UL>

<P><STRONG><a name="[f9]"></a>STMFLASH_WriteHalfWord</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
</UL>

<P><STRONG><a name="[fc]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
</UL>

<P><STRONG><a name="[fe]"></a>STMFLASH_BYTE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_MUL_Read
</UL>

<P><STRONG><a name="[fa]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
</UL>

<P><STRONG><a name="[fb]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>

<P><STRONG><a name="[fd]"></a>STMFLASH_MUL_Read</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_MUL_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
</UL>

<P><STRONG><a name="[4f5]"></a>Test_Write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stmflash.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>iap_write_appbin</STRONG> (Thumb, 124 bytes, Stack size 2088 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
</UL>

<P><STRONG><a name="[100]"></a>iap_load_app</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_MSP
</UL>

<P><STRONG><a name="[9c]"></a>AT24CXX_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_Init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
</UL>

<P><STRONG><a name="[9e]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_read_eeprom
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_intial
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_pid_intial
</UL>

<P><STRONG><a name="[7c]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_write_eeprom
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFlashTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_master_id_in_database
</UL>

<P><STRONG><a name="[104]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[105]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[106]"></a>AT24CXX_Check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24cxx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[a2]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
</UL>

<P><STRONG><a name="[107]"></a>AT24CXX_Write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
</UL>

<P><STRONG><a name="[108]"></a>new_write_eeprom</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_operation
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_factory
</UL>

<P><STRONG><a name="[a1]"></a>write_eeprom</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_hum_eep
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_pid_intial
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_keycope
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_factory
</UL>

<P><STRONG><a name="[109]"></a>new_read_eeprom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = new_read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_hum_eep
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_point_read
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_sector_initial
</UL>

<P><STRONG><a name="[a0]"></a>read_eeprom</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 24cxx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_hum_eep
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_sector_initial
</UL>

<P><STRONG><a name="[3f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>TIM3_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timerx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[58]"></a>TIM6_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>TIM6_Int_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM6_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
</UL>

<P><STRONG><a name="[114]"></a>TIM_Config</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIM_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_outputs_init
</UL>

<P><STRONG><a name="[11b]"></a>set_output</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timerx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_output
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_analog_output
</UL>

<P><STRONG><a name="[11f]"></a>ENC28J60_Reset</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ENC28J60_Reset &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Int_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[121]"></a>ENC28J60_Read_Op</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Read_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[122]"></a>ENC28J60_Write_Op</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
</UL>

<P><STRONG><a name="[123]"></a>ENC28J60_Read_Buf</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Read_Buf &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
</UL>

<P><STRONG><a name="[124]"></a>ENC28J60_Write_Buf</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENC28J60_Write_Buf &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
</UL>

<P><STRONG><a name="[125]"></a>ENC28J60_Set_Bank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[126]"></a>ENC28J60_Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ENC28J60_Read &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Get_EREVID
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
</UL>

<P><STRONG><a name="[127]"></a>ENC28J60_Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
</UL>

<P><STRONG><a name="[128]"></a>ENC28J60_PHY_Write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
</UL>

<P><STRONG><a name="[129]"></a>ENC28J60_Init</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Set_Bank
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[12a]"></a>ENC28J60_Get_EREVID</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
</UL>

<P><STRONG><a name="[12b]"></a>ENC28J60_Packet_Send</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60_Packet_Send &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Buf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_send
</UL>

<P><STRONG><a name="[12c]"></a>ENC28J60_Packet_Receive</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ENC28J60_Packet_Receive &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Buf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Write_Op
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Read_Op
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_read
</UL>

<P><STRONG><a name="[132]"></a>Lcd_Write_Byte</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pres_Char
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCharacter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_alarm_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_online_status
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_character_with_start_bit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
</UL>

<P><STRONG><a name="[12e]"></a>Lcd_Write_Command</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Fuction
</UL>

<P><STRONG><a name="[12d]"></a>Lcd_Set_Fuction</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
</UL>

<P><STRONG><a name="[12f]"></a>Lcd_Set_Y_Addr</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lcd_Set_Y_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Fuction
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pres_Char
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCharacter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_alarm_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_online_status
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_character_with_start_bit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
</UL>

<P><STRONG><a name="[130]"></a>Lcd_Set_X_Addr</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Fuction
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pres_Char
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCharacter
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_alarm_status
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_online_status
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_character_with_start_bit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
</UL>

<P><STRONG><a name="[131]"></a>Lcd_Write_Char</STRONG> (Thumb, 190 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_humidity_display
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Data
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_keycope
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_display
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_keycope
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature_display
</UL>

<P><STRONG><a name="[96]"></a>Lcd_Full_Screen</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Lcd_Full_Screen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_display
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[97]"></a>Lcd_Show_String</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_zone_text
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_keycope
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_display
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_display
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_keycope
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_display
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_display
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_display
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_system_info
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[134]"></a>Lcd_Clear_Row</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_zone_text
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_display
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_display
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_display
</UL>

<P><STRONG><a name="[136]"></a>itoa</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Data
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_display
</UL>

<P><STRONG><a name="[135]"></a>Lcd_Show_Data</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Lcd_Show_Data &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_humidity_display
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature_display
</UL>

<P><STRONG><a name="[137]"></a>update_cursor</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_cursor &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorTask
</UL>

<P><STRONG><a name="[29f]"></a>cursor_on</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cursor_on
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_init
</UL>

<P><STRONG><a name="[29a]"></a>cursor_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_keycope
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_request_password
</UL>

<P><STRONG><a name="[294]"></a>start_scrolling</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>

<P><STRONG><a name="[295]"></a>stop_scrolling</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>

<P><STRONG><a name="[138]"></a>get_time_text</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_time_text &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>update_message_context</STRONG> (Thumb, 740 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_message_context &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
</UL>

<P><STRONG><a name="[13c]"></a>display_character_with_start_bit</STRONG> (Thumb, 348 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = display_character_with_start_bit &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrolling_message
</UL>

<P><STRONG><a name="[13d]"></a>scrolling_message</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = scrolling_message &rArr; display_character_with_start_bit &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_character_with_start_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
</UL>

<P><STRONG><a name="[13e]"></a>start_back_light</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_back_light &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_keycope
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_keycope
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_keycope
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_keycope
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_keycope
</UL>

<P><STRONG><a name="[140]"></a>poll_back_light</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = poll_back_light &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
</UL>

<P><STRONG><a name="[ad]"></a>Lcd_Initial</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Lcd_Initial &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Fuction
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Command
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[206]"></a>reset_main_net_status_counter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[7b]"></a>poll_main_net_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFlashTask
</UL>

<P><STRONG><a name="[14a]"></a>RTC_Configuration</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[152]"></a>Time_Adjust</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
</UL>

<P><STRONG><a name="[150]"></a>RTC_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_NVIC_Config
</UL>

<P><STRONG><a name="[25]"></a>RTC_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_IRQHandler &rArr; get_time_text &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>KEY_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
</UL>

<P><STRONG><a name="[158]"></a>KEY_Scan</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = KEY_Scan &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
</UL>

<P><STRONG><a name="[68]"></a>vKEYTask</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vKEYTask &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>i2c_pic_start</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_pic_start &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
</UL>

<P><STRONG><a name="[15c]"></a>i2c_pic_stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = i2c_pic_stop &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
</UL>

<P><STRONG><a name="[15d]"></a>i2c_pic_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_pic_write &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
</UL>

<P><STRONG><a name="[15e]"></a>i2c_pic_read</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_pic_read &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
</UL>

<P><STRONG><a name="[15f]"></a>GET_ACK</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
</UL>

<P><STRONG><a name="[160]"></a>GIVE_PIC_ACK</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GIVE_PIC_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
</UL>

<P><STRONG><a name="[161]"></a>read_humidity_sensor_version</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = read_humidity_sensor_version &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
</UL>

<P><STRONG><a name="[4f6]"></a>humidity_check_online</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, humidity.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>read_humidity_sensor</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = read_humidity_sensor &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor
</UL>

<P><STRONG><a name="[163]"></a>pic_calibrate_temperature</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_temp
</UL>

<P><STRONG><a name="[164]"></a>pic_calibrate_humidity</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_humidity
</UL>

<P><STRONG><a name="[165]"></a>pic_write_table</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_humtable
</UL>

<P><STRONG><a name="[166]"></a>clear_hum_table</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_sensor_humtab
</UL>

<P><STRONG><a name="[167]"></a>read_calibration_point</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_calibration_point &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_humtab
</UL>

<P><STRONG><a name="[168]"></a>pic_read_sn18</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pic_read_sn18 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn
</UL>

<P><STRONG><a name="[169]"></a>read_humidity_sensor_Rev24</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_humidity_sensor_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor
</UL>

<P><STRONG><a name="[16a]"></a>read_humtab_Rev24</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_humtab_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_humtab
</UL>

<P><STRONG><a name="[16b]"></a>read_params_Rev24</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_params_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn
</UL>

<P><STRONG><a name="[16c]"></a>write_sensor_Rev24</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_sensor_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_heating_control
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_humidity
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_sensor_humtab
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_temp
</UL>

<P><STRONG><a name="[16d]"></a>write_humtable_Rev24</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_humtable
</UL>

<P><STRONG><a name="[16e]"></a>read_sensor_Rev25</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_sensor_Rev25 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor
</UL>

<P><STRONG><a name="[16f]"></a>update_humidity_display</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
</UL>

<P><STRONG><a name="[170]"></a>read_sensor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_sensor &rArr; read_sensor_Rev25 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
</UL>

<P><STRONG><a name="[171]"></a>write_sensor_temp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
</UL>

<P><STRONG><a name="[172]"></a>write_sensor_humtable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
</UL>

<P><STRONG><a name="[173]"></a>read_sensor_humtab</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_sensor_humtab &rArr; read_humtab_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
</UL>

<P><STRONG><a name="[174]"></a>clear_sensor_humtab</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
</UL>

<P><STRONG><a name="[175]"></a>write_sensor_humidity</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, humidity.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
</UL>

<P><STRONG><a name="[176]"></a>pic_read_sn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pic_read_sn &rArr; read_params_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
</UL>

<P><STRONG><a name="[177]"></a>pic_heating_control</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pic_heating_control &rArr; write_sensor_Rev24 &rArr; GET_ACK &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_operation
</UL>

<P><STRONG><a name="[178]"></a>external_operation</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, humidity.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = external_operation &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_write_eeprom
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_heating_control
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
</UL>

<P><STRONG><a name="[188]"></a>input_initial</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, analog_inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = input_initial &rArr; ADC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_outputs_init
</UL>

<P><STRONG><a name="[27b]"></a>get_ad_val</STRONG> (Thumb, 348 bytes, Stack size 36 bytes, analog_inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_ad_val
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_analog_output
</UL>

<P><STRONG><a name="[189]"></a>print_online_status</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, spec_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>

<P><STRONG><a name="[18a]"></a>print_alarm_status</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, spec_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>

<P><STRONG><a name="[18b]"></a>printCharacter</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, spec_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_big_number
</UL>

<P><STRONG><a name="[18c]"></a>print_big_number</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, spec_font.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printCharacter
</UL>

<P><STRONG><a name="[18d]"></a>Write_Pres_Char</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, spec_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Write_Pres_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_X_Addr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Set_Y_Addr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Pres
</UL>

<P><STRONG><a name="[18e]"></a>Lcd_Show_Pres</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, spec_font.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Lcd_Show_Pres &rArr; Write_Pres_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Pres_Char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_display
</UL>

<P><STRONG><a name="[b1]"></a>xTaskGenericCreate</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartMenuTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartScrollingTask
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartScanTask
</UL>

<P><STRONG><a name="[19d]"></a>vTaskDelete</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[19f]"></a>vTaskIncrementTick</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a0]"></a>xTaskResumeAll</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a4]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a3]"></a>vTaskDelayUntil</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[7d]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFlashTask
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_subnet_response
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_uart3_idle
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterOperationTask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTask
</UL>

<P><STRONG><a name="[1a5]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1a6]"></a>vTaskPrioritySet</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[72]"></a>vTaskSwitchContext</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[1a7]"></a>vTaskSuspend</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1a9]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[1a8]"></a>vTaskResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[1aa]"></a>xTaskResumeFromISR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[b3]"></a>vTaskStartScheduler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>vTaskEndScheduler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[13f]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_back_light
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>

<P><STRONG><a name="[1b0]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>

<P><STRONG><a name="[4f7]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b2]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b4]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b3]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ba]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b5]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stack_detect
</UL>

<P><STRONG><a name="[1bd]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1cb]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[1b7]"></a>vTaskPriorityInherit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1b8]"></a>vTaskPriorityDisinherit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[190]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[193]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[19a]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[1a2]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[19e]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[ab]"></a>xQueueCreate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>xQueueGenericSend</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
</UL>

<P><STRONG><a name="[ac]"></a>xQueueCreateMutex</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
</UL>

<P><STRONG><a name="[1c0]"></a>xQueueGenericReceive</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_external_co2
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart3_parameters
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[102]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
</UL>

<P><STRONG><a name="[1c1]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1c2]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[1c3]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_subnet_response
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[4f8]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>vQueueDelete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[4f9]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1ad]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1af]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[19c]"></a>vPortYieldFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>vPortEnterCritical</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>

<P><STRONG><a name="[19b]"></a>vPortExitCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>

<P><STRONG><a name="[21]"></a>xPortSysTickHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortSysTickHandler &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>pvPortMalloc</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[196]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[4fb]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_2.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>uart1_init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_modbus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
</UL>

<P><STRONG><a name="[1c9]"></a>uart2_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sub_serial_baudrate
</UL>

<P><STRONG><a name="[1ca]"></a>uart3_init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_modbus_init
</UL>

<P><STRONG><a name="[aa]"></a>delay_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>delay_us</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WaitDone
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_Rev25
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_humtable_Rev24
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sensor_Rev24
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_params_Rev24
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humtab_Rev24
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_Rev24
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn18
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_calibration_point
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_hum_table
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_write_table
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_humidity
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_calibrate_temperature
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIVE_PIC_ACK
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_write
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_stop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_pic_start
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
</UL>

<P><STRONG><a name="[79]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFlashTask
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Reset
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEAL_TEMCO_SENSOR
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterOperationTask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTask
</UL>

<P><STRONG><a name="[8c]"></a>timer_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[94]"></a>timer_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[1cd]"></a>timer_restart</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>

<P><STRONG><a name="[93]"></a>timer_expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_time
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[4fd]"></a>uip_setipid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>uip_add32</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
</UL>

<P><STRONG><a name="[8e]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_connect
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
</UL>

<P><STRONG><a name="[1ce]"></a>uip_chksum</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>

<P><STRONG><a name="[1d0]"></a>uip_ipchksum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uip_ipchksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1d2]"></a>uip_tcpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_tcpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1d3]"></a>uip_udpchksum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uip_udpchksum &rArr; upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1dd]"></a>uip_init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[1d4]"></a>uip_connect</STRONG> (Thumb, 254 bytes, Stack size 12 bytes, uip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>

<P><STRONG><a name="[1d5]"></a>uip_udp_new</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_init
</UL>

<P><STRONG><a name="[4fe]"></a>uip_unlisten</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uip.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>uip_listen</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, uip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[8f]"></a>uip_process</STRONG> (Thumb, 4930 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add_rcv_nxt
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[1db]"></a>uip_send</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_senddata
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
</UL>

<P><STRONG><a name="[4ff]"></a>uip_arp_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uip_arp.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>uip_arp_timer</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, uip_arp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[92]"></a>uip_arp_arpin</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uip_arp_arpin &rArr; uip_arp_update
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[90]"></a>uip_arp_out</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_out
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[1cc]"></a>clock_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock-arch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_restart
</UL>

<P><STRONG><a name="[b0]"></a>tapdev_init</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tapdev_init &rArr; ENC28J60_Init &rArr; ENC28J60_PHY_Write &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_PHY_Write
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_request
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>tapdev_read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tapdev_read &rArr; ENC28J60_Packet_Receive &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[91]"></a>tapdev_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tapdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tapdev_send &rArr; ENC28J60_Packet_Send &rArr; ENC28J60_Write &rArr; ENC28J60_Set_Bank &rArr; ENC28J60_Write_Op &rArr; SPI1_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60_Packet_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>

<P><STRONG><a name="[1d8]"></a>tcp_appcall</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp_demo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_appcall &rArr; tcp_server_appcall &rArr; responseCmd &rArr; read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1da]"></a>uip_log</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_demo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_aborted
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_timedout
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_closed
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_connected
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_acked
</UL>

<P><STRONG><a name="[1f1]"></a>Dhcpc_DeInit</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[1e0]"></a>dhcpc_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dhcpc_init &rArr; uip_udp_new
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[1f3]"></a>dhcpc_appcall</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dhcpc_appcall &rArr; handle_dhcp &rArr; dhcpc_configured &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[1e1]"></a>dhcpc_request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpc_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[1f4]"></a>resolv_found</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>

<P><STRONG><a name="[1f9]"></a>resolv_appcall</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = resolv_appcall &rArr; newdata &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[1fa]"></a>resolv_query</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, resolv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[1fc]"></a>resolv_lookup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, resolv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[500]"></a>resolv_getserver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>resolv_conf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
</UL>

<P><STRONG><a name="[501]"></a>resolv_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, resolv.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>tcp_server_senddata</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_server_senddata &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1ff]"></a>tcp_server_acked</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_acked
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[200]"></a>tcp_server_connected</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[201]"></a>tcp_server_closed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_closed
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[202]"></a>tcp_server_timedout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_timedout
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[203]"></a>tcp_server_aborted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_server_aborted
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_log
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[1e3]"></a>tcp_server_appcall</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, tcp_modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_server_appcall &rArr; responseCmd &rArr; read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_main_net_status_counter
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_aborted
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_timedout
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_closed
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_connected
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_acked
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_senddata
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_appcall
</UL>

<P><STRONG><a name="[1df]"></a>udp_scan_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_scan_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
</UL>

<P><STRONG><a name="[207]"></a>udp_scan_reply</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_scan_reply &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
</UL>

<P><STRONG><a name="[208]"></a>UDP_SCAN_APP</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UDP_SCAN_APP &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[1d9]"></a>udp_appcall</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_appcall
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1f2]"></a>dhcpc_configured</STRONG> (Thumb, 474 bytes, Stack size 16 bytes, udp_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpc_configured &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_conf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[80]"></a>serial_restart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART1_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[212]"></a>send_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
</UL>

<P><STRONG><a name="[214]"></a>USART_SendDataString</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
</UL>

<P><STRONG><a name="[7e]"></a>modbus_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = modbus_init &rArr; read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
</UL>

<P><STRONG><a name="[215]"></a>write_user_data_by_block</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_user_data_by_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
</UL>

<P><STRONG><a name="[21d]"></a>read_user_data_by_block</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_user_data_by_block
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
</UL>

<P><STRONG><a name="[98]"></a>SoftReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[216]"></a>Data_Deal</STRONG> (Thumb, 5418 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_write_eeprom
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_parameters_to_nodes
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sub_serial_baudrate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_master_id_in_database
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
</UL>

<P><STRONG><a name="[205]"></a>internalDeal</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = internalDeal &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_by_block
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[204]"></a>responseCmd</STRONG> (Thumb, 9362 bytes, Stack size 368 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = responseCmd &rArr; read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_user_data_by_block
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
</UL>

<P><STRONG><a name="[220]"></a>checkData</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = checkData &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[7f]"></a>dealwithData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dealwithData &rArr; responseCmd &rArr; read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSend_COM
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
</UL>

<P><STRONG><a name="[502]"></a>modbus_data_cope</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbus.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>stack_detect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[225]"></a>init_crc16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_slave
</UL>

<P><STRONG><a name="[213]"></a>crc16_byte</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_byte
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_send_byte
</UL>

<P><STRONG><a name="[221]"></a>crc16</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_external_co2
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_external_co2_ppm
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData1
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_to_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_assign_id_reply
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_scan_reply
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[227]"></a>switch_to_modbus</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = switch_to_modbus &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[32f]"></a>RS485_Get_Baudrate</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Turnaround_Delay
</UL>

<P><STRONG><a name="[503]"></a>Get_AVS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>Get_bacnet_value_from_buf</STRONG> (Thumb, 2146 bytes, Stack size 24 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
</UL>

<P><STRONG><a name="[22c]"></a>wirte_bacnet_value_to_buf</STRONG> (Thumb, 4252 bytes, Stack size 40 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Set
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[2b7]"></a>write_bacnet_name_to_buf</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_bacnet_name_to_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[2b6]"></a>write_bacnet_unit_to_buf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[2b1]"></a>get_AM_Status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2b8]"></a>write_bacent_AM_to_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[504]"></a>add_remote_panel_db</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>get_label</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2aa]"></a>get_description</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2b3]"></a>get_range</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[82]"></a>Set_Object_Name</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Set_Object_Name &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[22e]"></a>write_bacnet_description_to_buf</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_bacnet_description_to_buf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[30d]"></a>Get_Object_Name</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[505]"></a>Get_Time_Value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[506]"></a>Get_TV_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>Get_Object_Property_References</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>write_Time_Value</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>Get_CALENDAR_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>Get_Calendar_Date</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>write_annual_date</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacnet_function.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>uart_send_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bacnet_function.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_send_string &rArr; USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendDataString
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>

<P><STRONG><a name="[330]"></a>UART_Get_SendCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
</UL>

<P><STRONG><a name="[32e]"></a>Set_TXEN</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacnet_function.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Transmitter_Enable
</UL>

<P><STRONG><a name="[232]"></a>bip_set_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[231]"></a>bip_set_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[230]"></a>bip_set_socket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_Init
</UL>

<P><STRONG><a name="[1e2]"></a>bip_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bip_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_socket
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_addr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_set_port
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tapdev_init
</UL>

<P><STRONG><a name="[209]"></a>UDP_bacnet_APP</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_main_net_status_counter
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udp_new
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_appcall
</UL>

<P><STRONG><a name="[2df]"></a>bip_socket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
</UL>

<P><STRONG><a name="[50c]"></a>bip_valid</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bip.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>bip_get_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[86]"></a>bip_set_broadcast_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>

<P><STRONG><a name="[2e9]"></a>bip_get_broadcast_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[23a]"></a>bip_get_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[233]"></a>bip_send_pdu</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_decode_bip_address
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
</UL>

<P><STRONG><a name="[236]"></a>bip_receive</STRONG> (Thumb, 360 bytes, Stack size 88 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bip_receive
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_internet_to_bacnet_address
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
</UL>

<P><STRONG><a name="[2fe]"></a>bip_get_my_address</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
</UL>

<P><STRONG><a name="[2fb]"></a>bip_get_broadcast_address</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bip.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
</UL>

<P><STRONG><a name="[50d]"></a>Set_Input_Type</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>get_input_raw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[50e]"></a>set_output_raw</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>conver_by_unit_5v</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[246]"></a>conver_by_unit_10v</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[23c]"></a>conver_by_unit_custable</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_value_by_range
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[242]"></a>get_max_input</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[50f]"></a>get_max_output</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>get_high_spd_counter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[244]"></a>Filter</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, io_control.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[240]"></a>swap_double</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inputs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_match_custom
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_controller
</UL>

<P><STRONG><a name="[23f]"></a>swap_word</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_match_custom
</UL>

<P><STRONG><a name="[23d]"></a>get_input_value_by_range</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_custable
</UL>

<P><STRONG><a name="[23e]"></a>test_match_custom</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_word
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_double
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_input
</UL>

<P><STRONG><a name="[241]"></a>control_input</STRONG> (Thumb, 654 bytes, Stack size 24 bytes, inputs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_match_custom
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_double
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_value_by_range
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_spd_counter
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_input
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_custable
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_10v
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conver_by_unit_5v
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_input_raw
</UL>

<P><STRONG><a name="[7a]"></a>Flash_Write_Mass</STRONG> (Thumb, 88 bytes, Stack size 2192 bytes, store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = Flash_Write_Mass &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFlashTask
</UL>

<P><STRONG><a name="[ae]"></a>mass_flash_init</STRONG> (Thumb, 304 bytes, Stack size 2208 bytes, store.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4392<LI>Call Chain = mass_flash_init &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_appbin
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_MUL_Read
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_WriteHalfWord
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ErasePage
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Lock
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Unlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[248]"></a>receive_scan_reply</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = receive_scan_reply &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[249]"></a>send_scan_cmd</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = send_scan_cmd &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_uart3_idle
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart3_parameters
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_scan_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwith_conflict_id
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
</UL>

<P><STRONG><a name="[24e]"></a>receive_assign_id_reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = receive_assign_id_reply &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
</UL>

<P><STRONG><a name="[24f]"></a>assignment_id_with_sn</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = assignment_id_with_sn &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_uart3_idle
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart3_parameters
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_assign_id_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwith_conflict_id
</UL>

<P><STRONG><a name="[254]"></a>get_idle_id</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_idle_id
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwith_conflict_id
</UL>

<P><STRONG><a name="[251]"></a>remove_id_from_db</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_id_from_db
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_external_co2_ppm
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_in_database
</UL>

<P><STRONG><a name="[250]"></a>check_id_in_database</STRONG> (Thumb, 382 bytes, Stack size 20 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = check_id_in_database &rArr; remove_id_from_db
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_id_from_db
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwith_conflict_id
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
</UL>

<P><STRONG><a name="[252]"></a>bin_search</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = bin_search &rArr;  bin_search (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_in_database
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_id_from_db
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_sub_nodes
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
</UL>

<P><STRONG><a name="[253]"></a>dealwith_conflict_id</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dealwith_conflict_id &rArr; assignment_id_with_sn &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_id_in_database
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_idle_id
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_sub_nodes
</UL>

<P><STRONG><a name="[255]"></a>scan_sub_nodes</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = scan_sub_nodes &rArr; dealwith_conflict_id &rArr; assignment_id_with_sn &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwith_conflict_id
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTask
</UL>

<P><STRONG><a name="[256]"></a>init_scan_db</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_scan_db
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTask
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_scan_db
</UL>

<P><STRONG><a name="[257]"></a>clear_scan_db</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clear_scan_db &rArr; init_scan_db
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_db
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterOperationTask
</UL>

<P><STRONG><a name="[217]"></a>check_master_id_in_database</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = check_master_id_in_database &rArr;  check_master_id_in_database (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_master_id_in_database
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_master_id_in_database
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
</UL>

<P><STRONG><a name="[258]"></a>modify_master_id_in_database</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = modify_master_id_in_database &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
</UL>

<P><STRONG><a name="[259]"></a>get_parameters</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_parameters &rArr; crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
</UL>

<P><STRONG><a name="[25a]"></a>get_parameters_from_nodes</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_parameters_from_nodes &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_uart3_idle
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart3_parameters
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterOperationTask
</UL>

<P><STRONG><a name="[21b]"></a>write_parameters_to_nodes</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_parameters_to_nodes
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
</UL>

<P><STRONG><a name="[25b]"></a>check_write_to_nodes</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = check_write_to_nodes &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_uart3_idle
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart3_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterOperationTask
</UL>

<P><STRONG><a name="[25c]"></a>ScanTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ScanTask &rArr; scan_sub_nodes &rArr; dealwith_conflict_id &rArr; assignment_id_with_sn &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_modbus_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_db
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_sub_nodes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(.text)
</UL>
<P><STRONG><a name="[25e]"></a>ParameterOperationTask</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ParameterOperationTask &rArr; get_parameters_from_nodes &rArr; set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_to_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_scan_db
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>vStartScanTask</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[21a]"></a>set_sub_serial_baudrate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sub_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = set_sub_serial_baudrate &rArr; uart2_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_net_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
</UL>

<P><STRONG><a name="[260]"></a>sub_net_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sub_serial_baudrate
</UL>

<P><STRONG><a name="[510]"></a>set_subnet_parameters</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sub_net.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>wait_subnet_response</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>

<P><STRONG><a name="[264]"></a>sub_send_string</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_send_byte
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_USART_SendDataString
</UL>

<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, sub_net.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial1_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[269]"></a>DEAL_TEMCO_SENSOR</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData1
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial1_restart
</UL>

<P><STRONG><a name="[26a]"></a>read_from_slave</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_crc16
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial1_restart
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_send_byte
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sub_USART_SendDataString
</UL>

<P><STRONG><a name="[26b]"></a>uart3_serial_restart</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, subnet_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_modbus_init
</UL>

<P><STRONG><a name="[25d]"></a>uart3_modbus_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart3_modbus_init &rArr; uart3_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_serial_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTask
</UL>

<P><STRONG><a name="[26d]"></a>uart3_send_byte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart3_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
</UL>

<P><STRONG><a name="[24b]"></a>uart3_send_string</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uart3_send_string &rArr; PRI_USART3_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_byte
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRI_USART3_SendDataString
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart3_send_com
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_external_co2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_to_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[24d]"></a>wait_uart3_response</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_uart3_response &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_external_co2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_to_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[24c]"></a>set_uart3_parameters</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = set_uart3_parameters &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_external_co2
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_to_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[26f]"></a>receive_external_co2_ppm</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, subnet_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_id_from_db
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_external_co2
</UL>

<P><STRONG><a name="[270]"></a>request_external_co2</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, subnet_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_external_co2_ppm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_uart3_response
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_uart3_parameters
</UL>

<P><STRONG><a name="[271]"></a>send_test</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, subnet_scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_byte
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRI_USART3_SendDataString
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart3_send_com
</UL>

<P><STRONG><a name="[49]"></a>USART3_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART3_IRQHandler &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetInterruptMask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_serial_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24a]"></a>wait_for_uart3_idle</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_for_uart3_idle &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_write_to_nodes
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameters_from_nodes
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assignment_id_with_sn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_scan_cmd
</UL>

<P><STRONG><a name="[276]"></a>analog_outputs_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = analog_outputs_init &rArr; input_initial &rArr; ADC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_initial
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_Input_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
</UL>

<P><STRONG><a name="[277]"></a>get_output_mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_output_mode &rArr; P3_0
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P3_0
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P3_1
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
</UL>

<P><STRONG><a name="[27c]"></a>refresh_output</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = refresh_output &rArr; Set_analog_output &rArr; get_ad_val
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_analog_output
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
</UL>

<P><STRONG><a name="[67]"></a>vOutPutTask</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vOutPutTask &rArr; analog_outputs_init &rArr; input_initial &rArr; ADC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_output
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_output_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_outputs_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>look_up_table</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = look_up_table
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[9d]"></a>initial_hum_eep</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = initial_hum_eep &rArr; reset_to_factory &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_read_eeprom
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_factory
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_Dat_Init
</UL>

<P><STRONG><a name="[27f]"></a>refresh_sensor</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = refresh_sensor &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_read_eeprom
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_write_eeprom
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pic_read_sn
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor_humtab
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_sector_initial
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[285]"></a>tempCompensation_HUM</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tempCompensation_HUM &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[286]"></a>update_temperature</STRONG> (Thumb, 888 bytes, Stack size 24 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = update_temperature &rArr; Get_Hum_Para &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ad_val
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Filter
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look_up_table
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humidity
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_point_read
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
</UL>

<P><STRONG><a name="[28a]"></a>update_temperature_display</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = update_temperature_display &rArr; Lcd_Show_Data &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_display
</UL>

<P><STRONG><a name="[64]"></a>vUpdate_Temperature_Task</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = vUpdate_Temperature_Task &rArr; update_temperature &rArr; Get_Hum_Para &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;external_operation
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensor
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_humidity_sensor_version
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[289]"></a>Get_Hum_Para</STRONG> (Thumb, 496 bytes, Stack size 80 bytes, hum_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Get_Hum_Para &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[287]"></a>Sys_Filter</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, hum_para.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sys_Filter &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[293]"></a>update_menu_state</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_menu_state &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_scrolling
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_scrolling
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_keycope
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_keycope
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_keycope
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_keycope
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_keycope
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
</UL>

<P><STRONG><a name="[296]"></a>show_system_info</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[297]"></a>menu_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = menu_init &rArr; update_menu_state &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
</UL>

<P><STRONG><a name="[78]"></a>print</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdate_Temperature_Task
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vOutPutTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vKEYTask
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNETTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCOMMTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFlashTask
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CursorTask
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuTask
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterOperationTask
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanTask
</UL>

<P><STRONG><a name="[298]"></a>MenuTask</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MenuTask &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_back_light
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text)
</UL>
<P><STRONG><a name="[299]"></a>exit_request_password</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exit_request_password
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_init
</UL>

<P><STRONG><a name="[29b]"></a>ScrollingTask</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ScrollingTask &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrolling_message
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_message_context
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text)
</UL>
<P><STRONG><a name="[29c]"></a>CursorTask</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CursorTask &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_cursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>vStartMenuTask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vStartMenuTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29d]"></a>vStartScrollingTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, menu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[16]"></a>About_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuabout.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>About_display</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuabout.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>About_keycope</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menuabout.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[29e]"></a>display_zone_text</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, menuco2_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = display_zone_text &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_display
</UL>

<P><STRONG><a name="[7]"></a>Co2_Conf_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, menuco2_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Co2_Conf_init &rArr; display_zone_text &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_zone_text
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Co2_Conf_display</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, menuco2_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Co2_Conf_display &rArr; Co2_Conf_init &rArr; display_zone_text &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_zone_text
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Conf_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Co2_Conf_keycope</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, menuco2_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Co2_Conf_keycope &rArr; start_back_light &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Co2_Opt_init</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, menuco2_opt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Co2_Opt_init &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Co2_Opt_display</STRONG> (Thumb, 830 bytes, Stack size 8 bytes, menuco2_opt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Co2_Opt_display &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Co2_Opt_keycope</STRONG> (Thumb, 1448 bytes, Stack size 8 bytes, menuco2_opt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Co2_Opt_keycope &rArr; write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_parameters_to_nodes
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_id_from_db
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Hum_Conf_init</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, menuhum_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Hum_Conf_init &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Hum_Conf_display</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, menuhum_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Hum_Conf_display &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Hum_Conf_keycope</STRONG> (Thumb, 792 bytes, Stack size 24 bytes, menuhum_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Hum_Conf_keycope &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>Idle_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, menuidle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Idle_init &rArr; Lcd_Full_Screen
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_request_password
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Idle_display</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, menuidle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Idle_display &rArr; update_temperature_display &rArr; Lcd_Show_Data &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Pres
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature_display
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>Idle_keycope</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, menuidle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Idle_keycope &rArr; start_back_light &rArr; xTaskGetTickCount &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Co2_Main_init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, menumain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Co2_Main_init &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_on
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_keycope
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Co2_Main_display</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, menumain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Co2_Main_display &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Co2_Main_keycope</STRONG> (Thumb, 520 bytes, Stack size 16 bytes, menumain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Co2_Main_keycope &rArr; Co2_Main_init &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_off
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Main_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Misc_init</STRONG> (Thumb, 868 bytes, Stack size 24 bytes, menumisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Misc_init &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>Misc_display</STRONG> (Thumb, 3214 bytes, Stack size 16 bytes, menumisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Misc_display &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Misc_keycope</STRONG> (Thumb, 10362 bytes, Stack size 32 bytes, menumisc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Misc_keycope &rArr; write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Adjust
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_off
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_on
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_master_id_in_database
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_master_id_in_database
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Temp_Conf_init</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, menutemp_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Temp_Conf_init &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Temp_Conf_display</STRONG> (Thumb, 1354 bytes, Stack size 16 bytes, menutemp_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Temp_Conf_display &rArr; Lcd_Clear_Row &rArr; Lcd_Show_String &rArr; Lcd_Write_Char &rArr; Lcd_Set_X_Addr &rArr; Lcd_Set_Fuction
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Clear_Row
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Temp_Conf_keycope</STRONG> (Thumb, 1844 bytes, Stack size 24 bytes, menutemp_conf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Temp_Conf_keycope &rArr; write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_back_light
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Write_Char
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2a2]"></a>pid_controller</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pid_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_double
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
</UL>

<P><STRONG><a name="[65]"></a>vStartPIDTask</STRONG> (Thumb, 576 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vStartPIDTask &rArr; EEP_pid_intial &rArr; write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_controller
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_intial
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEP_pid_intial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[3fd]"></a>Analog_Input_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[302]"></a>Analog_Input_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[308]"></a>Analog_Input_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[2ac]"></a>Analog_Input_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ai.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2a5]"></a>Analog_Input_Encode_Property_APDU</STRONG> (Thumb, 310 bytes, Stack size 648 bytes, ai.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Analog_Input_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AM_Status
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[2b4]"></a>Analog_Input_Write_Property</STRONG> (Thumb, 344 bytes, Stack size 632 bytes, ai.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = Analog_Input_Write_Property &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[511]"></a>Analog_Output_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ao.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>Analog_Output_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[303]"></a>Analog_Output_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[309]"></a>Analog_Output_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[2ba]"></a>Analog_Output_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ao.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Relinquish
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Priority
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value
</UL>

<P><STRONG><a name="[2b9]"></a>Analog_Output_Present_Value</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Analog_Output_Present_Value &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2bb]"></a>Analog_Output_Present_Value_Priority</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ao.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>

<P><STRONG><a name="[2bc]"></a>Analog_Output_Present_Value_Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
</UL>

<P><STRONG><a name="[2bd]"></a>Analog_Output_Present_Value_Relinquish</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, ao.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
</UL>

<P><STRONG><a name="[2be]"></a>Analog_Output_Encode_Property_APDU</STRONG> (Thumb, 528 bytes, Stack size 672 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Analog_Output_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AM_Status
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_null
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[2c1]"></a>Analog_Output_Write_Property</STRONG> (Thumb, 406 bytes, Stack size 640 bytes, ao.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPValidateArgType
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Present_Value_Set
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Instance_To_Index
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[2c6]"></a>Analog_Value_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[301]"></a>Analog_Value_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[307]"></a>Analog_Value_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[2c4]"></a>Analog_Value_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, av.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2c3]"></a>Analog_Value_Encode_Property_APDU</STRONG> (Thumb, 288 bytes, Stack size 648 bytes, av.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = Analog_Value_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Instance_To_Index
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[2c5]"></a>Analog_Value_Write_Property</STRONG> (Thumb, 364 bytes, Stack size 640 bytes, av.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = Analog_Value_Write_Property &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Instance_To_Index
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Valid_Instance
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[512]"></a>address_match</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[513]"></a>address_remove_device</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>address_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, address.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>

<P><STRONG><a name="[514]"></a>address_init_partial</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[515]"></a>address_set_device_TTL</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>address_get_by_device</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2c9]"></a>address_get_device_id</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacnet_address_same
</UL>

<P><STRONG><a name="[2cb]"></a>address_add</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, address.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = address_add &rArr; address_remove_oldest
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_remove_oldest
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_add
</UL>

<P><STRONG><a name="[2cd]"></a>address_bind_request</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_remove_oldest
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2ce]"></a>address_add_binding</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_bind
</UL>

<P><STRONG><a name="[2cf]"></a>address_get_by_index</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2d4]"></a>address_count</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, address.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
</UL>

<P><STRONG><a name="[2d0]"></a>address_list_encode</STRONG> (Thumb, 110 bytes, Stack size 624 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
</UL>

<P><STRONG><a name="[2d3]"></a>rr_address_list_encode</STRONG> (Thumb, 394 bytes, Stack size 648 bytes, address.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_count
</UL>

<P><STRONG><a name="[516]"></a>address_cache_timer</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, address.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>Binary_Output_Property_Lists</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bo.o(.text), UNUSED)

<P><STRONG><a name="[518]"></a>Binary_Output_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bo.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>Binary_Output_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[304]"></a>Binary_Output_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[30a]"></a>Binary_Output_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[2d6]"></a>Binary_Output_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
</UL>

<P><STRONG><a name="[2d5]"></a>Binary_Output_Present_Value</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Binary_Output_Present_Value &rArr; Get_bacnet_value_from_buf &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[2d7]"></a>Binary_Output_Encode_Property_APDU</STRONG> (Thumb, 598 bytes, Stack size 672 bytes, bo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Binary_Output_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_range
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_description
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_label
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AM_Status
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_null
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[2d8]"></a>Binary_Output_Write_Property</STRONG> (Thumb, 532 bytes, Stack size 640 bytes, bo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = Binary_Output_Write_Property &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacent_AM_to_buf
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_unit_to_buf
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_name_to_buf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPValidateArgType
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[235]"></a>encode_unsigned16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_register_foreign_device
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack_init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack_init
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bvlc_result
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
</UL>

<P><STRONG><a name="[237]"></a>decode_unsigned16</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_decode
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_for_non_bbmd
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[39f]"></a>encode_unsigned24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
</UL>

<P><STRONG><a name="[39c]"></a>decode_unsigned24</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
</UL>

<P><STRONG><a name="[381]"></a>encode_unsigned32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_object_id
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>

<P><STRONG><a name="[238]"></a>decode_unsigned32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[3a8]"></a>encode_signed8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[3a2]"></a>decode_signed8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[3a9]"></a>encode_signed16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[3a3]"></a>decode_signed16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[3aa]"></a>encode_signed24</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[3a4]"></a>decode_signed24</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[3ab]"></a>encode_signed32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacint.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
</UL>

<P><STRONG><a name="[3a5]"></a>decode_signed32</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bacint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
</UL>

<P><STRONG><a name="[2d9]"></a>bvlc_intial</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[519]"></a>bvlc_maintenance_timer</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, bvlc.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>bvlc_internet_to_bacnet_address</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bvlc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2e7]"></a>bvlc_decode_bip_address</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_delete_foreign_device
</UL>

<P><STRONG><a name="[2dd]"></a>bvlc_encode_read_bdt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bbmd_read_bdt
</UL>

<P><STRONG><a name="[2de]"></a>bvlc_send_mpdu</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_register_with_bbmd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_fdt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_bdt
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_result
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bbmd_read_bdt
</UL>

<P><STRONG><a name="[2e0]"></a>bvlc_bbmd_read_bdt</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt
</UL>

<P><STRONG><a name="[2f0]"></a>bvlc_create_bdt</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2f2]"></a>bvlc_register_foreign_device</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2e8]"></a>bvlc_bdt_forward_npdu</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2ea]"></a>bvlc_forward_npdu</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2eb]"></a>bvlc_fdt_forward_npdu</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2ec]"></a>bvlc_send_result</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bvlc_result
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2ed]"></a>bvlc_send_bdt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2ee]"></a>bvlc_send_fdt</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2f1]"></a>bvlc_bdt_member_mask_is_unicast</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2ef]"></a>bvlc_receive</STRONG> (Thumb, 628 bytes, Stack size 88 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_internet_to_bacnet_address
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_addr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_socket
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_member_mask_is_unicast
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_fdt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_bdt
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_result
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_register_foreign_device
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_create_bdt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_decode_bip_address
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_delete_foreign_device
</UL>

<P><STRONG><a name="[2f3]"></a>bvlc_send_pdu</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_port
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_addr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_decode_bip_address
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2f5]"></a>bvlc_register_with_bbmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_mpdu
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_register_foreign_device
</UL>

<P><STRONG><a name="[2f6]"></a>bvlc_for_non_bbmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
</UL>

<P><STRONG><a name="[51a]"></a>bvlc_get_last_result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bvlc.o(.text), UNUSED)

<P><STRONG><a name="[51b]"></a>bvlc_get_function_code</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bvlc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>datalink_send_pdu</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, datalink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am_Unicast
</UL>

<P><STRONG><a name="[89]"></a>datalink_receive</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, datalink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = datalink_receive &rArr; dlmstp_receive &rArr; MSTP_Master_Node_FSM &rArr; MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; uart_send_string &rArr; USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_receive
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
</UL>

<P><STRONG><a name="[2fa]"></a>datalink_get_broadcast_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datalink.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_broadcast_address
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_get_broadcast_address
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Local
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Global
</UL>

<P><STRONG><a name="[2fd]"></a>datalink_get_my_address</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, datalink.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_get_my_address
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_get_my_address
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[83]"></a>Device_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>

<P><STRONG><a name="[3ba]"></a>Device_Object_Instance_Number</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_who_is
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[84]"></a>Device_Set_Object_Instance_Number</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[311]"></a>Device_Valid_Object_Instance_Number</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[30e]"></a>Device_Vendor_Identifier</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[300]"></a>Device_Object_List_Count</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Device_Object_List_Count
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Count
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Count
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Count
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Count
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[306]"></a>Device_Object_List_Identifier</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Device_Object_List_Identifier
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Index_To_Instance
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Count
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Index_To_Instance
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Count
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Index_To_Instance
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Count
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Index_To_Instance
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Count
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Index_To_Instance
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[30c]"></a>Device_Encode_Property_APDU</STRONG> (Thumb, 704 bytes, Stack size 680 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Device_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Object_Name
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_service_supported
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Vendor_Identifier
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[310]"></a>Device_Write_Property</STRONG> (Thumb, 408 bytes, Stack size 640 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Device_Write_Property &rArr; Set_Object_Name &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Set_Object_Instance_Number
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_encoding
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_ansi_copy
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Valid_Object_Instance_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[87]"></a>dlmstp_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dlmstp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
</UL>

<P><STRONG><a name="[51c]"></a>dlmstp_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>dlmstp_fill_bacnet_address</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>MSTP_Receive_Frame_FSM</STRONG> (Thumb, 1142 bytes, Stack size 40 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MSTP_Receive_Frame_FSM &rArr; switch_to_modbus &rArr; uart1_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_modbus
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_ReceiveError
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DataAvailable
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Header
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_receive
</UL>

<P><STRONG><a name="[2f8]"></a>dlmstp_send_pdu</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dlmstp_send_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
</UL>

<P><STRONG><a name="[2f9]"></a>dlmstp_receive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = dlmstp_receive &rArr; MSTP_Master_Node_FSM &rArr; MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; uart_send_string &rArr; USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
</UL>

<P><STRONG><a name="[323]"></a>dlmstp_set_max_master</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_set_mac_address
</UL>

<P><STRONG><a name="[322]"></a>dlmstp_set_mac_address</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_set_max_master
</UL>

<P><STRONG><a name="[51e]"></a>dlmstp_mac_address</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>dlmstp_set_max_info_frames</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>dlmstp_max_info_frames</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[521]"></a>dlmstp_max_master</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dlmstp.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>dlmstp_get_my_address</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dlmstp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
</UL>

<P><STRONG><a name="[2fc]"></a>dlmstp_get_broadcast_address</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dlmstp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
</UL>

<P><STRONG><a name="[325]"></a>FIFO_Count</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Pull
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Empty
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Available
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Full
</UL>

<P><STRONG><a name="[324]"></a>FIFO_Full</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FIFO_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Put
</UL>

<P><STRONG><a name="[326]"></a>FIFO_Available</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
</UL>

<P><STRONG><a name="[327]"></a>FIFO_Empty</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FIFO_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Get
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DataAvailable
</UL>

<P><STRONG><a name="[522]"></a>FIFO_Peek</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>FIFO_Get</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_Get &rArr; FIFO_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_DataAvailable
</UL>

<P><STRONG><a name="[329]"></a>FIFO_Pull</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Count
</UL>

<P><STRONG><a name="[20d]"></a>FIFO_Put</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, fifo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FIFO_Put &rArr; FIFO_Full
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[32a]"></a>FIFO_Add</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, fifo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Available
</UL>

<P><STRONG><a name="[523]"></a>FIFO_Flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fifo.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>FIFO_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifo.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recievebuf_Initialize
</UL>

<P><STRONG><a name="[8a]"></a>npdu_handler</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, h_npdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_decode
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
</UL>

<P><STRONG><a name="[88]"></a>Recievebuf_Initialize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMSTP_TASK
</UL>

<P><STRONG><a name="[31b]"></a>RS485_Transmitter_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_TXEN
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[320]"></a>Timer_Silence</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Turnaround_Delay
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>

<P><STRONG><a name="[31a]"></a>RS485_Turnaround_Delay</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_Turnaround_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Get_Baudrate
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[20f]"></a>Timer_Silence_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>

<P><STRONG><a name="[31c]"></a>RS485_Send_Data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RS485_Send_Data &rArr; uart_send_string &rArr; USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_SendCount
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[31e]"></a>RS485_ReceiveError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs485.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[31f]"></a>RS485_DataAvailable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rs485.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RS485_DataAvailable &rArr; FIFO_Get &rArr; FIFO_Empty
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Get
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Empty
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
</UL>

<P><STRONG><a name="[524]"></a>Timer_Initialize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rs485.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>apdu_set_confirmed_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[526]"></a>apdu_set_unrecognized_service_handler_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[527]"></a>apdu_set_unconfirmed_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>apdu_service_supported</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = apdu_service_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
</UL>

<P><STRONG><a name="[528]"></a>apdu_service_supported_to_index</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>apdu_set_confirmed_simple_ack_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[52a]"></a>apdu_set_confirmed_ack_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[52b]"></a>apdu_set_error_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[52c]"></a>apdu_set_abort_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[52d]"></a>apdu_set_reject_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>apdu_decode_confirmed_service_request</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = apdu_decode_confirmed_service_request
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_max_segs
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_max_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[52e]"></a>apdu_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>apdu_timeout_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>apdu_retries</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>apdu_retries_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, apdu.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>apdu_handler</STRONG> (Thumb, 400 bytes, Stack size 80 bytes, apdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_who_is
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_add
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_decode_confirmed_service_request
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
</UL>

<P><STRONG><a name="[532]"></a>Binary_Input_Property_Lists</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bi.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>Binary_Input_Valid_Instance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[305]"></a>Binary_Input_Count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Count
</UL>

<P><STRONG><a name="[30b]"></a>Binary_Input_Index_To_Instance</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_List_Identifier
</UL>

<P><STRONG><a name="[533]"></a>Binary_Input_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bi.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>Binary_Input_Instance_To_Index</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Change_Of_Value_Clear
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Change_Of_Value
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service_Set
</UL>

<P><STRONG><a name="[33e]"></a>Binary_Input_Present_Value</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[340]"></a>Binary_Input_Out_Of_Service</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Binary_Input_Out_Of_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[341]"></a>Binary_Input_Change_Of_Value</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
</UL>

<P><STRONG><a name="[342]"></a>Binary_Input_Change_Of_Value_Clear</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>

<P><STRONG><a name="[343]"></a>Binary_Input_Encode_Value_List</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, bi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Change_Of_Value
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value
</UL>

<P><STRONG><a name="[344]"></a>Binary_Input_Present_Value_Set</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Binary_Input_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[347]"></a>Binary_Input_Polarity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
</UL>

<P><STRONG><a name="[349]"></a>Binary_Input_Polarity_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[346]"></a>Binary_Input_Read_Property</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Binary_Input_Read_Property &rArr; encode_application_bitstring &rArr; encode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Polarity
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
</UL>

<P><STRONG><a name="[348]"></a>Binary_Input_Write_Property</STRONG> (Thumb, 256 bytes, Stack size 640 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = Binary_Input_Write_Property &rArr; Binary_Input_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WPValidateArgType
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Polarity_Set
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Out_Of_Service_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[3c3]"></a>bacnet_address_copy</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bacaddr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[2ca]"></a>bacnet_address_same</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bacaddr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_get_device_id
</UL>

<P><STRONG><a name="[34a]"></a>bacapp_encode_application_data</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_signed
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_double
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_data
</UL>

<P><STRONG><a name="[34f]"></a>bacapp_decode_data</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bacapp_decode_data &rArr; decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real_safe
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_octet_string
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id_safe
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double_safe
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date_safe
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_character_string
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_boolean
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time_safe
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_safe
</UL>

<P><STRONG><a name="[2b5]"></a>bacapp_decode_application_data</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bacapp_decode_application_data &rArr; bacapp_decode_data &rArr; decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[35b]"></a>bacapp_decode_application_data_safe</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[35e]"></a>bacapp_decode_data_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bacapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_len
</UL>

<P><STRONG><a name="[35d]"></a>bacapp_decode_application_data_len</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bacapp_decode_application_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data_len
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
</UL>

<P><STRONG><a name="[35f]"></a>bacapp_encode_context_data_value</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_time
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_signed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_real
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_null
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_double
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_date
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_boolean
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_data
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data
</UL>

<P><STRONG><a name="[36e]"></a>bacapp_context_tag_type</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, bacapp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data
</UL>

<P><STRONG><a name="[36d]"></a>bacapp_encode_context_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_context_tag_type
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[36f]"></a>bacapp_decode_context_data</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_context_tag_type
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
</UL>

<P><STRONG><a name="[370]"></a>bacapp_decode_context_data_len</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bacapp_decode_context_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_context_tag_type
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data_len
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
</UL>

<P><STRONG><a name="[371]"></a>bacapp_encode_data</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[372]"></a>bacapp_copy</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_time
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_date
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_copy
</UL>

<P><STRONG><a name="[378]"></a>bacapp_data_len</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, bacapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bacapp_data_len &rArr; bacapp_decode_context_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_len
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[379]"></a>bacapp_parse_application_data</STRONG> (Thumb, 360 bytes, Stack size 72 bytes, bacapp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init_ascii_hex
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3f8]"></a>encode_max_segs_max_apdu</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
</UL>

<P><STRONG><a name="[332]"></a>decode_max_segs</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_decode_confirmed_service_request
</UL>

<P><STRONG><a name="[333]"></a>decode_max_apdu</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_decode_confirmed_service_request
</UL>

<P><STRONG><a name="[380]"></a>encode_tag</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_null
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_boolean
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_time
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_signed
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_real
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_null
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_double
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_date
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_boolean
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_signed
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_double
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
</UL>

<P><STRONG><a name="[3f3]"></a>encode_opening_tag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_datetime
</UL>

<P><STRONG><a name="[3f4]"></a>encode_closing_tag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_object_property_end
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_datetime
</UL>

<P><STRONG><a name="[382]"></a>decode_tag_number</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_date
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_time
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
</UL>

<P><STRONG><a name="[383]"></a>decode_tag_number_safe</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value_safe
</UL>

<P><STRONG><a name="[534]"></a>decode_is_opening_tag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)

<P><STRONG><a name="[535]"></a>decode_is_closing_tag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>decode_tag_number_and_value</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_signed
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_enumerated
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_unsigned
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_character_string
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_octet_string
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bitstring
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data_len
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_len
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_double
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_real
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_error_class_and_code
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_decode_service_request
</UL>

<P><STRONG><a name="[35c]"></a>decode_tag_number_and_value_safe</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_application_data_safe
</UL>

<P><STRONG><a name="[384]"></a>decode_is_context_tag</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_is_context_tag &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_signed
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_enumerated
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_unsigned
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_character_string
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_octet_string
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bitstring
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_double
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_real
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[385]"></a>decode_is_context_tag_with_length</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_date
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bacnet_time
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_object_id
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_boolean2
</UL>

<P><STRONG><a name="[33a]"></a>decode_is_opening_tag_number</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_is_opening_tag_number &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_datetime
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[33d]"></a>decode_is_closing_tag_number</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_is_closing_tag_number &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_data
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_datetime
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[2b2]"></a>encode_application_boolean</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_application_boolean &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[361]"></a>encode_context_boolean</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[536]"></a>decode_context_boolean</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)

<P><STRONG><a name="[386]"></a>decode_context_boolean2</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[350]"></a>decode_boolean</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[2bf]"></a>encode_application_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_application_null &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[360]"></a>encode_context_null</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[357]"></a>decode_bitstring</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_octet
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_set_bits_used
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_reverse_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bitstring
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[38a]"></a>decode_context_bitstring</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[38b]"></a>encode_bitstring</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = encode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_octet
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bytes_used
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bits_used
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_reverse_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
</UL>

<P><STRONG><a name="[2b0]"></a>encode_application_bitstring</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_application_bitstring &rArr; encode_bitstring
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bytes_used
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[368]"></a>encode_context_bitstring</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitstring_bytes_used
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[38f]"></a>decode_object_id</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_object_id
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_object_id
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id_safe
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[35a]"></a>decode_object_id_safe</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_object_id_safe &rArr; decode_object_id
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[390]"></a>decode_context_object_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[391]"></a>encode_bacnet_object_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned32
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
</UL>

<P><STRONG><a name="[36c]"></a>encode_context_object_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_context_object_id &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_object_id
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
</UL>

<P><STRONG><a name="[2a6]"></a>encode_application_object_id</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_object_id &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_object_id
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
</UL>

<P><STRONG><a name="[392]"></a>encode_octet_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_value
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
</UL>

<P><STRONG><a name="[2d2]"></a>encode_application_octet_string</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
</UL>

<P><STRONG><a name="[366]"></a>encode_context_octet_string</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[355]"></a>decode_octet_string</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decode_octet_string &rArr; octetstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[395]"></a>decode_context_octet_string</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
</UL>

<P><STRONG><a name="[399]"></a>encode_bacnet_character_string_safe</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = encode_bacnet_character_string_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
</UL>

<P><STRONG><a name="[396]"></a>encode_bacnet_character_string</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_value
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string_safe
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_encoding
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
</UL>

<P><STRONG><a name="[2a9]"></a>encode_application_character_string</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
</UL>

<P><STRONG><a name="[367]"></a>encode_context_character_string</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
</UL>

<P><STRONG><a name="[356]"></a>decode_character_string</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = decode_character_string &rArr; characterstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
</UL>

<P><STRONG><a name="[39b]"></a>decode_context_character_string</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[351]"></a>decode_unsigned</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned32
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned24
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_unsigned
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_decode_service_request
</UL>

<P><STRONG><a name="[39d]"></a>decode_context_unsigned</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[39e]"></a>encode_bacnet_unsigned</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned32
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned24
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_enumerated
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
</UL>

<P><STRONG><a name="[362]"></a>encode_context_unsigned</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_context_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_encode_apdu
</UL>

<P><STRONG><a name="[2c0]"></a>encode_application_unsigned</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
</UL>

<P><STRONG><a name="[33c]"></a>decode_enumerated</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decode_enumerated &rArr; decode_unsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_enumerated
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_decode_service_request
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_error_class_and_code
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
</UL>

<P><STRONG><a name="[3a0]"></a>decode_context_enumerated</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>

<P><STRONG><a name="[3a1]"></a>encode_bacnet_enumerated</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>

<P><STRONG><a name="[2ab]"></a>encode_application_enumerated</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_enumerated &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_enumerated
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_encode_apdu
</UL>

<P><STRONG><a name="[369]"></a>encode_context_enumerated</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_context_enumerated &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_enumerated
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_encode_apdu
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_encode_apdu
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_encode_apdu
</UL>

<P><STRONG><a name="[352]"></a>decode_signed</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_signed
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed32
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed24
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed16
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed8
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_signed
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[3a6]"></a>decode_context_signed</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_signed
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>

<P><STRONG><a name="[3a7]"></a>encode_bacnet_signed</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed32
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed24
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed16
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_signed8
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_signed
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_signed
</UL>

<P><STRONG><a name="[34b]"></a>encode_application_signed</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[363]"></a>encode_context_signed</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_signed
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[2ad]"></a>encode_application_real</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = encode_application_real &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_real
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[364]"></a>encode_context_real</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_real
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[34c]"></a>encode_application_double</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_double
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
</UL>

<P><STRONG><a name="[365]"></a>encode_context_double</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_double
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[3ae]"></a>encode_bacnet_time</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_time
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
</UL>

<P><STRONG><a name="[34e]"></a>encode_application_time</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_time
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_datetime
</UL>

<P><STRONG><a name="[36b]"></a>encode_context_time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_time
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[3af]"></a>decode_bacnet_time</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_bacnet_time
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_time
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time_safe
</UL>

<P><STRONG><a name="[359]"></a>decode_bacnet_time_safe</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[3b0]"></a>decode_application_time</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_datetime
</UL>

<P><STRONG><a name="[3b1]"></a>decode_context_bacnet_time</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bacnet_time
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[3b2]"></a>encode_bacnet_date</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_date
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
</UL>

<P><STRONG><a name="[34d]"></a>encode_application_date</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_date
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_application_data
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_datetime
</UL>

<P><STRONG><a name="[36a]"></a>encode_context_date</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_date
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_data_value
</UL>

<P><STRONG><a name="[3b3]"></a>decode_date</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_date
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_date
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date_safe
</UL>

<P><STRONG><a name="[358]"></a>decode_date_safe</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[3b4]"></a>decode_application_date</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_datetime
</UL>

<P><STRONG><a name="[3b5]"></a>decode_context_date</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacdcode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_date
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag_with_length
</UL>

<P><STRONG><a name="[3bf]"></a>encode_simple_ack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[2ae]"></a>bitstring_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
</UL>

<P><STRONG><a name="[2af]"></a>bitstring_set_bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitstring_set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Encode_Value_List
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
</UL>

<P><STRONG><a name="[537]"></a>bitstring_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>bitstring_bits_used</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
</UL>

<P><STRONG><a name="[38d]"></a>bitstring_bytes_used</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_bitstring
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_bitstring
</UL>

<P><STRONG><a name="[38e]"></a>bitstring_octet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
</UL>

<P><STRONG><a name="[388]"></a>bitstring_set_octet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
</UL>

<P><STRONG><a name="[389]"></a>bitstring_set_bits_used</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
</UL>

<P><STRONG><a name="[538]"></a>bitstring_bits_capacity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>bitstring_copy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[539]"></a>bitstring_same</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>characterstring_init</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = characterstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_character_string
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_character_string
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[2a8]"></a>characterstring_init_ansi</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = characterstring_init_ansi &rArr; characterstring_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_decode_service_request
</UL>

<P><STRONG><a name="[397]"></a>characterstring_length</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_character_string
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[398]"></a>characterstring_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
</UL>

<P><STRONG><a name="[312]"></a>characterstring_encoding</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bacnet_character_string
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_copy
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[374]"></a>characterstring_copy</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_value
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_length
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_encoding
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[313]"></a>characterstring_ansi_copy</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = characterstring_ansi_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
</UL>

<P><STRONG><a name="[53a]"></a>characterstring_same</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>characterstring_ansi_same</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[53b]"></a>characterstring_append</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>characterstring_truncate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[53d]"></a>characterstring_capacity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>characterstring_set_encoding</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>characterstring_printable</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>utf8_isvalid</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_valid
</UL>

<P><STRONG><a name="[3b7]"></a>characterstring_valid</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_isvalid
</UL>

<P><STRONG><a name="[2d1]"></a>octetstring_init</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, bacstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = octetstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_octet_string
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_octet_string
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rr_address_list_encode
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_list_encode
</UL>

<P><STRONG><a name="[37d]"></a>octetstring_init_ascii_hex</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[393]"></a>octetstring_length</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_octet_string
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_octet_string
</UL>

<P><STRONG><a name="[394]"></a>octetstring_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_octet_string
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_copy
</UL>

<P><STRONG><a name="[373]"></a>octetstring_copy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_value
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_length
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;octetstring_init
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
</UL>

<P><STRONG><a name="[540]"></a>octetstring_copy_value</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[541]"></a>octetstring_append</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>octetstring_truncate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>octetstring_capacity</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>octetstring_value_same</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, bacstr.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>CRC_Calc_Header</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[319]"></a>CRC_Calc_Data</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, crc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Receive_Frame_FSM
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
</UL>

<P><STRONG><a name="[337]"></a>handler_who_is</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, h_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = handler_who_is &rArr; whois_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_decode_service_request
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[336]"></a>handler_write_property</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, h_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Write_Property
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Write_Property
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_simple_ack
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Write_Property
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wp_decode_service_request
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_encode_apdu
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_encode_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[2c2]"></a>WPValidateArgType</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, h_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WPValidateArgType
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Write_Property
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[545]"></a>npdu_copy_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, npdu.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>npdu_encode_pdu</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, npdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = npdu_encode_pdu
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[3bc]"></a>npdu_encode_npdu_data</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, npdu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[32b]"></a>npdu_decode</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, npdu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = npdu_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
</UL>

<P><STRONG><a name="[315]"></a>iam_encode_pdu</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, s_iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iam_encode_pdu &rArr; iam_encode_apdu &rArr; encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Vendor_Identifier
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_encode_unconfirmed_frame
</UL>

<P><STRONG><a name="[338]"></a>Send_I_Am</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, s_iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Send_I_Am &rArr; iam_encode_pdu &rArr; iam_encode_apdu &rArr; encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[3c2]"></a>iam_unicast_encode_pdu</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, s_iam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacnet_address_copy
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Vendor_Identifier
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_apdu
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_I_Am_Unicast
</UL>

<P><STRONG><a name="[3c4]"></a>Send_I_Am_Unicast</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, s_iam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[3c5]"></a>Send_WhoIs_To_Network</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, s_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whois_encode_apdu
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Remote
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Local
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Global
</UL>

<P><STRONG><a name="[3c7]"></a>Send_WhoIs_Global</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, s_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Send_WhoIs_Global &rArr; Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs
</UL>

<P><STRONG><a name="[3c8]"></a>Send_WhoIs_Local</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, s_whois.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_broadcast_address
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_communication_enabled
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>

<P><STRONG><a name="[3ca]"></a>Send_WhoIs_Remote</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, s_whois.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcc_communication_enabled
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>

<P><STRONG><a name="[316]"></a>Send_WhoIs</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s_whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Send_WhoIs &rArr; Send_WhoIs_Global &rArr; Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Global
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_encode_unconfirmed_frame
</UL>

<P><STRONG><a name="[546]"></a>abort_convert_error_code</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, abort.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>abort_encode_apdu</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = abort_encode_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[547]"></a>abort_decode_service_request</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, abort.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>bacerror_encode_apdu</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bacerror_encode_apdu &rArr; encode_application_enumerated &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[3cb]"></a>bacerror_decode_error_class_and_code</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bacerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_service_request
</UL>

<P><STRONG><a name="[3cc]"></a>bacerror_decode_service_request</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bacerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_decode_error_class_and_code
</UL>

<P><STRONG><a name="[3cd]"></a>decode_real</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_real
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real_safe
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_real
</UL>

<P><STRONG><a name="[353]"></a>decode_real_safe</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = decode_real_safe &rArr; decode_real
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[3ce]"></a>decode_context_real</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bacreal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_real
</UL>

<P><STRONG><a name="[3ac]"></a>encode_bacnet_real</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = encode_bacnet_real
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_real
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_real
</UL>

<P><STRONG><a name="[3cf]"></a>decode_double</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_double
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double_safe
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_context_double
</UL>

<P><STRONG><a name="[354]"></a>decode_double_safe</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bacreal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = decode_double_safe &rArr; decode_double
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_data
</UL>

<P><STRONG><a name="[3ad]"></a>encode_bacnet_double</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bacreal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_double
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_double
</UL>

<P><STRONG><a name="[3d0]"></a>decode_context_double</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, bacreal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_double
</UL>

<P><STRONG><a name="[3d2]"></a>datetime_is_leap_year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch_into_ymd
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>

<P><STRONG><a name="[3d1]"></a>datetime_month_days</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch_into_ymd
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year_into_md
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>

<P><STRONG><a name="[3d3]"></a>datetime_ymd_is_valid</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_date_is_valid
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>

<P><STRONG><a name="[3d4]"></a>datetime_date_is_valid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_valid
</UL>

<P><STRONG><a name="[3d8]"></a>datetime_day_of_week</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_values
</UL>

<P><STRONG><a name="[37f]"></a>datetime_set_date</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_week
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch_into_date
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_year_into_date
</UL>

<P><STRONG><a name="[3d9]"></a>datetime_day_of_year_into_date</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year_into_md
</UL>

<P><STRONG><a name="[3da]"></a>datetime_day_of_year</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>

<P><STRONG><a name="[3db]"></a>datetime_days_since_epoch</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
</UL>

<P><STRONG><a name="[3dd]"></a>datetime_days_since_epoch_into_date</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_set_date
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch_into_ymd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
</UL>

<P><STRONG><a name="[3df]"></a>datetime_time_is_valid</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_valid
</UL>

<P><STRONG><a name="[3de]"></a>datetime_is_valid</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_time_is_valid
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_date_is_valid
</UL>

<P><STRONG><a name="[3e1]"></a>datetime_compare_date</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare
</UL>

<P><STRONG><a name="[3e2]"></a>datetime_compare_time</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare
</UL>

<P><STRONG><a name="[3e0]"></a>datetime_compare</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare_time
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_compare_date
</UL>

<P><STRONG><a name="[3e4]"></a>datetime_wildcard_compare_date</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare
</UL>

<P><STRONG><a name="[3e5]"></a>datetime_wildcard_compare_time</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare
</UL>

<P><STRONG><a name="[3e3]"></a>datetime_wildcard_compare</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare_time
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_compare_date
</UL>

<P><STRONG><a name="[376]"></a>datetime_copy_date</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy
</UL>

<P><STRONG><a name="[377]"></a>datetime_copy_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_copy
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy
</UL>

<P><STRONG><a name="[3e6]"></a>datetime_copy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_time
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_copy_date
</UL>

<P><STRONG><a name="[548]"></a>datetime_set_time</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>datetime_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>datetime_set_values</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_week
</UL>

<P><STRONG><a name="[3e8]"></a>datetime_seconds_since_midnight</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds_since_midnight
</UL>

<P><STRONG><a name="[3ea]"></a>datetime_minutes_since_midnight</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minutes_since_midnight
</UL>

<P><STRONG><a name="[3ec]"></a>datetime_add_minutes</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch_into_date
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds_since_midnight_into_hms
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seconds_since_midnight
</UL>

<P><STRONG><a name="[54a]"></a>datetime_wildcard</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[54b]"></a>datetime_wildcard_present</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>datetime_date_wildcard_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_set
</UL>

<P><STRONG><a name="[3f0]"></a>datetime_time_wildcard_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_wildcard_set
</UL>

<P><STRONG><a name="[3ee]"></a>datetime_wildcard_set</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_time_wildcard_set
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_date_wildcard_set
</UL>

<P><STRONG><a name="[3f1]"></a>bacapp_encode_datetime</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_time
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_date
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_context_datetime
</UL>

<P><STRONG><a name="[3f2]"></a>bacapp_encode_context_datetime</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_opening_tag
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_encode_datetime
</UL>

<P><STRONG><a name="[3f5]"></a>bacapp_decode_datetime</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_date
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_application_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_context_datetime
</UL>

<P><STRONG><a name="[3f6]"></a>bacapp_decode_context_datetime</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_decode_datetime
</UL>

<P><STRONG><a name="[54c]"></a>dcc_enable_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>dcc_communication_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Remote
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_Local
</UL>

<P><STRONG><a name="[54d]"></a>dcc_communication_disabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>dcc_communication_initiation_disabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[54f]"></a>dcc_duration_seconds</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>dcc_timer_seconds</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[551]"></a>dcc_set_status_duration</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dcc.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>dcc_encode_apdu</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_max_segs_max_apdu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_character_string
</UL>

<P><STRONG><a name="[3f9]"></a>dcc_decode_service_request</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, dcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_character_string
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>

<P><STRONG><a name="[339]"></a>handler_i_am_add</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, h_iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = handler_i_am_add &rArr; iam_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[3fb]"></a>handler_i_am_bind</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, h_iam.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add_binding
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_decode_service_request
</UL>

<P><STRONG><a name="[3fc]"></a>Encode_Property_APDU</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, h_rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = Encode_Property_APDU &rArr; Device_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Encode_Property_APDU
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Value_Valid_Instance
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Encode_Property_APDU
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Output_Valid_Instance
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Encode_Property_APDU
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Analog_Input_Valid_Instance
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Valid_Instance
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Encode_Property_APDU
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Valid_Object_Instance_Number
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Object_Instance_Number
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Encode_Property_APDU
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Valid_Instance
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[335]"></a>handler_read_property</STRONG> (Thumb, 236 bytes, Stack size 112 bytes, h_rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = handler_read_property &rArr; Encode_Property_APDU &rArr; Device_Encode_Property_APDU &rArr; encode_application_character_string &rArr; encode_bacnet_character_string &rArr; encode_bacnet_character_string_safe
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_decode_service_request
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_object_property_end
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encode_Property_APDU
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacerror_encode_apdu
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_encode_apdu
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[3c1]"></a>iam_encode_apdu</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iam_encode_apdu &rArr; encode_application_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_unsigned
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_object_id
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_application_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_unicast_encode_pdu
</UL>

<P><STRONG><a name="[3fa]"></a>iam_decode_service_request</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, iam.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = iam_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_add
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_i_am_bind
</UL>

<P><STRONG><a name="[334]"></a>handler_unrecognized_service</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, noserv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handler_unrecognized_service &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_get_my_address
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_send_pdu
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reject_encode_apdu
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_pdu
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_encode_npdu_data
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[3c6]"></a>whois_encode_apdu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = whois_encode_apdu &rArr; encode_context_unsigned &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs_To_Network
</UL>

<P><STRONG><a name="[3b9]"></a>whois_decode_service_request</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, whois.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = whois_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_who_is
</UL>

<P><STRONG><a name="[405]"></a>wp_encode_apdu</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_opening_tag
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_max_segs_max_apdu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>

<P><STRONG><a name="[3bb]"></a>wp_decode_service_request</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wp_decode_service_request &rArr; bacapp_data_len &rArr; bacapp_decode_context_data_len &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_data_len
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_closing_tag_number
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_write_property
</UL>

<P><STRONG><a name="[552]"></a>reject_convert_error_code</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, reject.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>reject_encode_apdu</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, reject.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_unrecognized_service
</UL>

<P><STRONG><a name="[553]"></a>reject_decode_service_request</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, reject.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>rp_encode_apdu</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_max_segs_max_apdu
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>

<P><STRONG><a name="[401]"></a>rp_decode_service_request</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rp_decode_service_request &rArr; decode_tag_number_and_value &rArr; decode_tag_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[402]"></a>rp_ack_encode_apdu_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rp_ack_encode_apdu_init &rArr; encode_context_object_id &rArr; encode_tag
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_opening_tag
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_unsigned
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_object_id
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_context_enumerated
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu
</UL>

<P><STRONG><a name="[403]"></a>rp_ack_encode_apdu_object_property_end</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rp.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handler_read_property
</UL>

<P><STRONG><a name="[407]"></a>rp_ack_encode_apdu</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_closing_tag
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_ack_encode_apdu_init
</UL>

<P><STRONG><a name="[408]"></a>rp_ack_decode_service_request</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, rp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_object_id
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_context_tag
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_unsigned
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_tag_number_and_value
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_is_opening_tag_number
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_enumerated
</UL>

<P><STRONG><a name="[223]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
</UL>

<P><STRONG><a name="[222]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mass_flash_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_message_context
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_string
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_bacnet_description_to_buf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_user_data_by_block
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_bacnet_APP
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_SCAN_APP
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_appcall
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_send_pdu
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_pdu
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_get_by_index
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add_binding
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_bind_request
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_get_by_device
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_menu_state
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>

<P><STRONG><a name="[554]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_out
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[555]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[556]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_scan_reply
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scan_db
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_handler
</UL>

<P><STRONG><a name="[2c7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_intial
</UL>

<P><STRONG><a name="[557]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2a0]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
</UL>

<P><STRONG><a name="[192]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[133]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Object_Name
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Pres
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_message_context
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_Data
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_init_ansi
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;characterstring_ansi_same
</UL>

<P><STRONG><a name="[1fd]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_lookup
</UL>

<P><STRONG><a name="[1ee]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[2a1]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
</UL>

<P><STRONG><a name="[1fb]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_query
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
</UL>

<P><STRONG><a name="[37e]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[40b]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[37a]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[37b]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>

<P><STRONG><a name="[281]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Filter
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humidity
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2method
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2method
</UL>

<P><STRONG><a name="[412]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Filter
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humidity
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2method
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Filter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2method
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[417]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[28f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[290]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[229]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Filter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humidity
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Filter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_bacnet_value_from_buf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2method
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Present_Value_Set
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Write_Property
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;responseCmd
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempCompensation_HUM
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_humidity
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wirte_bacnet_value_to_buf
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Read_Property
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Output_Present_Value
</UL>

<P><STRONG><a name="[28b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
</UL>

<P><STRONG><a name="[28d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[418]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[413]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[558]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[559]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6d]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[40c]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[40a]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[6a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[40e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[41d]"></a>__strtod_int</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, strtod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtod
</UL>

<P><STRONG><a name="[411]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[410]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[416]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[415]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[42a]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[55a]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[55b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[55c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[55d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[41c]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[421]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[423]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[420]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[55e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[560]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[1f5]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
</UL>

<P><STRONG><a name="[426]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[561]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[139]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_message_context
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time_text
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Deal
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_zone_text
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_keycope
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Conf_display
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_keycope
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Misc_display
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle_display
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_keycope
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hum_Conf_display
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_keycope
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Co2_Opt_display
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScrollingTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_system_info
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_to_factory
</UL>

<P><STRONG><a name="[434]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[40f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[562]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[427]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[428]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[429]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[42b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[42c]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[42d]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[563]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[564]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[565]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[430]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[422]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[6e]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[28c]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
</UL>

<P><STRONG><a name="[292]"></a>pow</STRONG> (Thumb, 2478 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hum_Para
</UL>

<P><STRONG><a name="[432]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[37c]"></a>strtod</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, strtod.o(i.strtod), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bacapp_parse_application_data
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>debug_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>

<P><STRONG><a name="[66]"></a>vFlashTask</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4376<LI>Call Chain = vFlashTask &rArr; Flash_Write_Mass &rArr; iap_write_appbin &rArr; STMFLASH_Write_NoCheck &rArr; STMFLASH_WriteHalfWord &rArr; STMFLASH_WaitDone &rArr; delay_us &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_main_net_status
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Mass
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>vCOMMTask</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = vCOMMTask &rArr; dealwithData &rArr; responseCmd &rArr; read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_restart
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>vMSTP_TASK</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = vMSTP_TASK &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;npdu_handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datalink_receive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recievebuf_Initialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inital_Bacnet_Server
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>vNETTask</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = vNETTask &rArr; uip_polling &rArr; uip_process &rArr; udp_appcall &rArr; UDP_bacnet_APP &rArr; npdu_handler &rArr; apdu_handler &rArr; handler_write_property &rArr; Analog_Output_Write_Property &rArr; Analog_Output_Present_Value_Set &rArr; wirte_bacnet_value_to_buf &rArr; Data_Deal &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftReset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Show_String
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Full_Screen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_polling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>watchdog_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[b7]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d0]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ce]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[cc]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ca]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[141]"></a>lcd_gpio_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Initial
</UL>

<P><STRONG><a name="[142]"></a>RTC_NVIC_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[144]"></a>Is_Leap_Year</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[149]"></a>RTC_Get_Week</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[143]"></a>RTC_Set</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>

<P><STRONG><a name="[147]"></a>RTC_Get</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>ADC_Config</STRONG> (Thumb, 404 bytes, Stack size 80 bytes, analog_inputs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_initial
</UL>

<P><STRONG><a name="[18f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[191]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[194]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1a1]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
</UL>

<P><STRONG><a name="[1ab]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[1ac]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[69]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYieldFromISR
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[1b6]"></a>usTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
</UL>

<P><STRONG><a name="[1b9]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1bb]"></a>prvIsQueueFull</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1bc]"></a>prvCopyDataToQueue</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; vTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinherit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1be]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1bf]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c5]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1cf]"></a>chksum</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upper_layer_chksum
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_ipchksum
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_chksum
</UL>

<P><STRONG><a name="[1d1]"></a>upper_layer_chksum</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = upper_layer_chksum &rArr; chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_udpchksum
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_tcpchksum
</UL>

<P><STRONG><a name="[1d6]"></a>uip_add_rcv_nxt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_add_rcv_nxt
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_add32
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_process
</UL>

<P><STRONG><a name="[1dc]"></a>uip_arp_update</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, uip_arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uip_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_arp_arpin
</UL>

<P><STRONG><a name="[1e7]"></a>add_msg_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[1eb]"></a>add_server_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
</UL>

<P><STRONG><a name="[1ec]"></a>add_req_ipaddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
</UL>

<P><STRONG><a name="[1e8]"></a>add_req_options</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[1e9]"></a>add_end</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dhcpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[1e4]"></a>create_msg</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = create_msg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>

<P><STRONG><a name="[1e6]"></a>send_discover</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_discover &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_req_options
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[1ea]"></a>send_request</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_request &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_msg
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_end
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_req_ipaddr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_server_id
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_msg_type
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[1ef]"></a>parse_options</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_options
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
</UL>

<P><STRONG><a name="[1ed]"></a>parse_msg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_msg &rArr; parse_options
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_options
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_dhcp
</UL>

<P><STRONG><a name="[1f0]"></a>handle_dhcp</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, dhcpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = handle_dhcp &rArr; dhcpc_configured &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_expired
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_configured
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dhcpc_DeInit
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_request
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpc_appcall
</UL>

<P><STRONG><a name="[1f8]"></a>parse_name</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, resolv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;newdata
</UL>

<P><STRONG><a name="[1f6]"></a>check_entries</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = check_entries &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uip_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[1f7]"></a>newdata</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, resolv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = newdata &rArr; resolv_found &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_found
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resolv_appcall
</UL>

<P><STRONG><a name="[224]"></a>initSend_COM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData
</UL>

<P><STRONG><a name="[234]"></a>bip_decode_bip_address</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bip_decode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bip_send_pdu
</UL>

<P><STRONG><a name="[262]"></a>Sub_USART_SendDataString</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_send_string
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_slave
</UL>

<P><STRONG><a name="[263]"></a>sub_send_byte</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_send_string
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_slave
</UL>

<P><STRONG><a name="[265]"></a>serial1_restart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sub_net.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_from_slave
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEAL_TEMCO_SENSOR
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData1
</UL>

<P><STRONG><a name="[266]"></a>checkData1</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData1
</UL>

<P><STRONG><a name="[268]"></a>internalDeal1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dealwithData1
</UL>

<P><STRONG><a name="[267]"></a>dealwithData1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sub_net.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internalDeal1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkData1
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial1_restart
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEAL_TEMCO_SENSOR
</UL>

<P><STRONG><a name="[26e]"></a>init_uart3_send_com</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, subnet_scan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
</UL>

<P><STRONG><a name="[26c]"></a>PRI_USART3_SendDataString</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, subnet_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PRI_USART3_SendDataString &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_test
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_send_string
</UL>

<P><STRONG><a name="[272]"></a>Mode_Input_Initial</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mode_Input_Initial &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_outputs_init
</UL>

<P><STRONG><a name="[273]"></a>P3_1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P3_1
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_output_mode
</UL>

<P><STRONG><a name="[275]"></a>P3_0</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = P3_0
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_output_mode
</UL>

<P><STRONG><a name="[279]"></a>get_theory_ad</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_theory_ad
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_analog_output
</UL>

<P><STRONG><a name="[27a]"></a>get_pid_theory_ad</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_pid_theory_ad
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_analog_output
</UL>

<P><STRONG><a name="[278]"></a>Set_analog_output</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, analog_output.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Set_analog_output &rArr; get_ad_val
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_output
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ad_val
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pid_theory_ad
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_theory_ad
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_output
</UL>

<P><STRONG><a name="[27d]"></a>reset_to_factory</STRONG> (Thumb, 730 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = reset_to_factory &rArr; new_write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_write_eeprom
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_hum_eep
</UL>

<P><STRONG><a name="[27e]"></a>user_sector_initial</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = user_sector_initial &rArr; new_read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_read_eeprom
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_eeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_sensor
</UL>

<P><STRONG><a name="[280]"></a>min2method</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = min2method &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_point_read
</UL>

<P><STRONG><a name="[283]"></a>calibrate_point_read</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = calibrate_point_read &rArr; new_read_eeprom &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_read_eeprom
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min2method
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[284]"></a>get_humidity</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, temperature.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_humidity &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_temperature
</UL>

<P><STRONG><a name="[2a3]"></a>EEP_pid_intial</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EEP_pid_intial &rArr; write_eeprom &rArr; AT24CXX_WriteOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
</UL>

<P><STRONG><a name="[2a4]"></a>pid_intial</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pid_intial &rArr; AT24CXX_ReadOneByte &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartPIDTask
</UL>

<P><STRONG><a name="[2cc]"></a>address_remove_oldest</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, address.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = address_remove_oldest
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_bind_request
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_add
</UL>

<P><STRONG><a name="[2db]"></a>bvlc_encode_bip_address</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_forwarded_npdu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_address_entry
</UL>

<P><STRONG><a name="[2da]"></a>bvlc_encode_address_entry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack
</UL>

<P><STRONG><a name="[2dc]"></a>bvlc_encode_bvlc_result</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_result
</UL>

<P><STRONG><a name="[2e1]"></a>bvlc_encode_read_bdt_ack_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack
</UL>

<P><STRONG><a name="[2e2]"></a>bvlc_encode_read_bdt_ack</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_bdt_ack_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_address_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_bdt
</UL>

<P><STRONG><a name="[2e3]"></a>bvlc_encode_forwarded_npdu</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_fdt_forward_npdu
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_forward_npdu
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_bdt_forward_npdu
</UL>

<P><STRONG><a name="[2e4]"></a>bvlc_encode_read_fdt_ack_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack
</UL>

<P><STRONG><a name="[2e5]"></a>bvlc_encode_read_fdt_ack</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_read_fdt_ack_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_encode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_send_fdt
</UL>

<P><STRONG><a name="[2e6]"></a>bvlc_delete_foreign_device</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_decode_bip_address
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_receive
</UL>

<P><STRONG><a name="[2f4]"></a>bvlc_encode_register_foreign_device</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bvlc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_unsigned16
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bvlc_register_with_bbmd
</UL>

<P><STRONG><a name="[314]"></a>dlmstp_encode_unconfirmed_frame</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dlmstp_encode_unconfirmed_frame &rArr; Send_WhoIs &rArr; Send_WhoIs_Global &rArr; Send_WhoIs_To_Network &rArr; datalink_send_pdu &rArr; bip_send_pdu &rArr; uip_send
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iam_encode_pdu
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WhoIs
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>

<P><STRONG><a name="[317]"></a>MSTP_Send_Frame</STRONG> (Thumb, 198 bytes, Stack size 640 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; uart_send_string &rArr; USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Turnaround_Delay
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Transmitter_Enable
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Send_Data
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Header
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc_Data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Master_Node_FSM
</UL>

<P><STRONG><a name="[321]"></a>MSTP_Master_Node_FSM</STRONG> (Thumb, 1252 bytes, Stack size 56 bytes, dlmstp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = MSTP_Master_Node_FSM &rArr; MSTP_Send_Frame &rArr; RS485_Send_Data &rArr; uart_send_string &rArr; USART_SendDataString &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence_Reset
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Silence
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSTP_Send_Frame
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_encode_unconfirmed_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dlmstp_receive
</UL>

<P><STRONG><a name="[345]"></a>Binary_Input_Out_Of_Service_Set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Binary_Input_Out_Of_Service_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Instance_To_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Binary_Input_Write_Property
</UL>

<P><STRONG><a name="[387]"></a>byte_reverse_bits</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bacdcode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encode_bitstring
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_bitstring
</UL>

<P><STRONG><a name="[3d5]"></a>day_of_year</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_year
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;days_since_epoch
</UL>

<P><STRONG><a name="[3d6]"></a>day_of_year_into_md</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_year_into_date
</UL>

<P><STRONG><a name="[3d7]"></a>days_since_epoch</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_ymd_is_valid
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_leap_year
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day_of_year
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_day_of_week
</UL>

<P><STRONG><a name="[3dc]"></a>days_since_epoch_into_ymd</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_month_days
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_days_since_epoch_into_date
</UL>

<P><STRONG><a name="[3e9]"></a>seconds_since_midnight</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_seconds_since_midnight
</UL>

<P><STRONG><a name="[3eb]"></a>minutes_since_midnight</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_minutes_since_midnight
</UL>

<P><STRONG><a name="[3ed]"></a>seconds_since_midnight_into_hms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, datetime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_add_minutes
</UL>

<P><STRONG><a name="[425]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[42f]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[42e]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[6c]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[41b]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[41f]"></a>_fp_value</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
