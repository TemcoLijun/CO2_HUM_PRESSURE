#ifndef __REGISTERLIST_H
#define	__REGISTERLIST_H

#include "define.h"
#include "controls.h"

#define ORIGINALADDRESSVALUE   200

 
#define	SCAN_DB_START_ADDR	1700

typedef enum
{
	EEP_SERIALNUMBER_LOWORD = 0,
	EEP_SERIALNUMBER_HIWORD = EEP_SERIALNUMBER_LOWORD + 2,
	EEP_VERSION_NUMBER_LO = EEP_SERIALNUMBER_HIWORD + 2,
	EEP_VERSION_NUMBER_HI,
	EEP_ADDRESS,
	EEP_PRODUCT_MODEL,
	EEP_HARDWARE_REV,
	EEP_PIC_VER,
	EEP_BASE_ADDRESS,

	EEP_UPDATE_STATUS = 16,
	EEP_SERIALNUMBER_WRITE_FLAG,
	EEP_FACTORY_SET,
	EEP_MODBUS_COM_CONFIG = 20 , 
	
	EEP_BAUDRATE ,
	EEP_INSTANCE_1 ,
	EEP_INSTANCE_2 ,
	EEP_INSTANCE_3 ,
	EEP_INSTANCE_4 ,
	EEP_MAC_ADDRESS_1 = 40	,
	EEP_MAC_ADDRESS_2,
	EEP_MAC_ADDRESS_3,
	EEP_MAC_ADDRESS_4,
	EEP_MAC_ADDRESS_5,
	EEP_MAC_ADDRESS_6,	
	EEP_IP_MODE		,
	EEP_IP_ADDRESS_1,
	EEP_IP_ADDRESS_2 ,
	EEP_IP_ADDRESS_3 ,
	EEP_IP_ADDRESS_4 ,
	
	EEP_SUB_MASK_ADDRESS_1 ,
	EEP_SUB_MASK_ADDRESS_2 ,
	EEP_SUB_MASK_ADDRESS_3 ,
	EEP_SUB_MASK_ADDRESS_4 ,
	
	EEP_GATEWAY_ADDRESS_1 ,
	EEP_GATEWAY_ADDRESS_2 ,
	EEP_GATEWAY_ADDRESS_3 ,
	EEP_GATEWAY_ADDRESS_4 ,
	
	EEP_TCP_SERVER   ,
	EEP_LISTEN_PORT_HI	,
	EEP_LISTEN_PORT_LO ,
	
	EEP_CO2_MODULE_TYPE, 
	
	EEP_DEG_C_OR_F, 

	EEP_HUM_CURRENT_DEFAULT,		// decide which table will run, default tabel or customer table   current=1 default=0
//	EEP_HUM_PIC_UPDATE,
//	EEP_HUM_CAL_NUM,
//	EEP_HUM_CAL_EREASE,
	EEP_HUM_OFFSETFLAG,
	EEP_HUM_PICDATAOK,
//	EEP_TEMP5_10V,
//	EEP_HUM5_10V,

	EEP_INTERNAL_SENSOR_EXIST,

	EEP_ALARM_AUTO_MANUAL,
	EEP_PRE_ALARM_SETTING_ON_TIME,
	EEP_PRE_ALARM_SETTING_OFF_TIME,

	EEP_INT_PRE_ALARM_SETPOINT,
	EEP_INT_ALARM_SETPOINT = EEP_INT_PRE_ALARM_SETPOINT + 2,
	EEP_INT_CO2_OFFSET = EEP_INT_ALARM_SETPOINT + 2,

	EEP_ALARM_DELAY_TIME = EEP_INT_CO2_OFFSET + 2,

	EEP_CO2_SLOPE_DETECT_VALUE = EEP_ALARM_DELAY_TIME + 1,
	EEP_CO2_FILTER = EEP_CO2_SLOPE_DETECT_VALUE + 2,

	EEP_OUTPUT_CO2_RANGE_MIN,
	EEP_OUTPUT_CO2_RANGE_MAX = EEP_OUTPUT_CO2_RANGE_MIN + 2,

	EEP_EXTERNAL_NODES_PLUG_AND_PLAY = EEP_OUTPUT_CO2_RANGE_MAX + 2,

	EEP_USE_PASSWORD,
	EEP_USER_PASSWORD0,
	EEP_USER_PASSWORD1,
	EEP_USER_PASSWORD2,
	EEP_USER_PASSWORD3,

	EEP_INTERNAL_TEMPERATURE_OFFSET, // +2

	EEP_MENU_BLOCK_SECONDS = EEP_INTERNAL_TEMPERATURE_OFFSET + 2,
	EEP_BACKLIGHT_KEEP_SECONDS,

	EEP_OUTPUT_TEMPERATURE_RANGE_MIN,
	EEP_OUTPUT_TEMPERATURE_RANGE_MAX = EEP_OUTPUT_TEMPERATURE_RANGE_MIN + 2,

	EEP_OUTPUT_HUMIDITY_RANGE_MIN = EEP_OUTPUT_TEMPERATURE_RANGE_MAX + 2,
	EEP_OUTPUT_HUMIDITY_RANGE_MAX = EEP_OUTPUT_HUMIDITY_RANGE_MIN + 2,

	EEP_HUM_AMP_OUTPUT_OFFSET = EEP_OUTPUT_HUMIDITY_RANGE_MAX + 2,
	EEP_TEMP_AMP_OUTPUT_OFFSET = EEP_HUM_AMP_OUTPUT_OFFSET + 1,
	EEP_CO2_AMP_OUTPUT_OFFSET = EEP_TEMP_AMP_OUTPUT_OFFSET + 1,
	EEP_HUM_VOL_OUTPUT_OFFSET = EEP_CO2_AMP_OUTPUT_OFFSET + 1,
	EEP_TEMP_VOL_OUTPUT_OFFSET = EEP_HUM_VOL_OUTPUT_OFFSET + 1,
	EEP_CO2_VOL_OUTPUT_OFFSET = EEP_TEMP_VOL_OUTPUT_OFFSET + 1,

	EEP_MAP_END = SCAN_DB_START_ADDR - 2,
	EEP_SCAN_DB_COUNTER = SCAN_DB_START_ADDR - 1,

    EEP_PRESSURE_TEST,
	EEP_PRESSURE_SENSOR_MODEL,
	EEP_PRESSURE_UNIT,
    EEP_PRESSURE_VALUE_ORG_OFFSET,	
	EEP_OUTPUT_RANGE_MIN_PRESSURE = EEP_PRESSURE_VALUE_ORG_OFFSET + 2,					
	EEP_OUTPUT_RANGE_MAX_PRESSURE = EEP_OUTPUT_RANGE_MIN_PRESSURE + 2,	
	EEP_PRESSURE_FILTER = EEP_OUTPUT_RANGE_MAX_PRESSURE + 2,  
	EEP_INPUT_AUTO_MANUAL_PRE,//0 = AUTO,1 = MANUAL  
	EEP_PRESSURE_CAL_POINT,	
	EEP_CAL_PR0,
	EEP_CAL_AD0 = EEP_CAL_PR0 + 2,
	EEP_CAL_PR1 = EEP_CAL_AD0 + 2,
	EEP_CAL_AD1 = EEP_CAL_PR1 + 2,
	EEP_CAL_PR2 = EEP_CAL_AD1 + 2,
	EEP_CAL_AD2 = EEP_CAL_PR2 + 2,
	EEP_CAL_PR3 = EEP_CAL_AD2 + 2,
	EEP_CAL_AD3 = EEP_CAL_PR3 + 2,
	EEP_CAL_PR4 = EEP_CAL_AD3 + 2,
	EEP_CAL_AD4 = EEP_CAL_PR4 + 2,
	EEP_CAL_PR5 = EEP_CAL_AD4 + 2,
	EEP_CAL_AD5 = EEP_CAL_PR5 + 2,
	EEP_CAL_PR6 = EEP_CAL_AD5 + 2,
	EEP_CAL_AD6 = EEP_CAL_PR6 + 2,
	EEP_CAL_PR7 = EEP_CAL_AD6 + 2,
	EEP_CAL_AD7 = EEP_CAL_PR7 + 2,
	EEP_CAL_PR8 = EEP_CAL_AD7 + 2,
	EEP_CAL_AD8 = EEP_CAL_PR8 + 2,
	EEP_CAL_PR9 = EEP_CAL_AD8 + 2,
	EEP_CAL_AD9 = EEP_CAL_PR9 + 2,
	EEP_TABLE_SEL = EEP_CAL_AD9 + 2,
	EEP_USER_CAL_POINT, 
	EEP_USER_CAL_PR0,
	EEP_USER_CAL_AD0 = EEP_USER_CAL_PR0 + 2, 
	EEP_USER_CAL_PR9 = EEP_USER_CAL_PR0 + 36,
	EEP_USER_CAL_AD9 = EEP_USER_CAL_PR9 + 2, 
	EEP_INT_TEMPERATURE_FILTER = EEP_USER_CAL_AD9 + 2,
	EEP_EXT_TEMPERATURE_FILTER,
	EEP_HUMIDITY_FILTER,
	
	EEP_HUM_TEST,
	EEP_HUM_SN,
	EEP_CAL_FAC_PTS = EEP_HUM_SN + 2,	 		 
   
    HUMCOUNT1_H,
	HUMRH1_H	= HUMCOUNT1_H + 2,
	HUMCOUNT2_H = HUMRH1_H + 2,		
	HUMRH2_H 	= HUMCOUNT2_H + 2,	
	HUMCOUNT3_H = HUMRH2_H+ 2,		
	HUMRH3_H	= HUMCOUNT3_H + 2,
	HUMCOUNT4_H = HUMRH3_H + 2,	
	HUMRH4_H	= HUMCOUNT4_H + 2,
	HUMCOUNT5_H = HUMRH4_H + 2,	
	HUMRH5_H	= HUMCOUNT5_H + 2,
	HUMCOUNT6_H = HUMRH5_H + 2 ,				
	HUMRH6_H	= HUMCOUNT6_H + 2,
	HUMCOUNT7_H = HUMRH6_H + 2 ,
	HUMRH7_H	= HUMCOUNT7_H + 2,
	HUMCOUNT8_H = HUMRH7_H + 2 ,
	HUMRH8_H	= HUMCOUNT8_H + 2,
	HUMCOUNT9_H = HUMRH8_H + 2 ,
	HUMRH9_H	= HUMCOUNT9_H + 2,
	HUMCOUNT10_H = HUMRH9_H + 2 ,			
	HUMRH10_H	= HUMCOUNT10_H + 2, 
	EEP_USER_POINTS = HUMRH10_H + 2,	
	
	EEP_USER_RH1,
	EEP_USER_FRE1 = EEP_USER_RH1+2,
	EEP_USER_RH2  = EEP_USER_FRE1+2,
	EEP_USER_FRE2 = EEP_USER_RH2+2,
	EEP_USER_RH3  = EEP_USER_FRE2+2,
	EEP_USER_FRE3 = EEP_USER_RH3+2,
	EEP_USER_RH4  = EEP_USER_FRE3+2,
	EEP_USER_FRE4 = EEP_USER_RH4+2,
	EEP_USER_RH5  = EEP_USER_FRE4+2,
	EEP_USER_FRE5 = EEP_USER_RH5+2,
	EEP_USER_RH6  = EEP_USER_FRE5+2,
	EEP_USER_FRE6 = EEP_USER_RH6+2,
	EEP_USER_RH7  = EEP_USER_FRE6+2,
	EEP_USER_FRE7 = EEP_USER_RH7+2,
	EEP_USER_RH8  = EEP_USER_FRE7+2,
	EEP_USER_FRE8 = EEP_USER_RH8+2,
	EEP_USER_RH9  = EEP_USER_FRE8+2,
	EEP_USER_FRE9 = EEP_USER_RH9+2,
	EEP_USER_RH10 = EEP_USER_FRE9+2,
	EEP_USER_FRE10= EEP_USER_RH10+2,
	EEP_TEMP_OFFSET = EEP_USER_FRE10 + 2,  
	EEP_HUM_OFFSET = EEP_TEMP_OFFSET + 2 ,
	EEP_CAL_DEFAULT_HUM = EEP_HUM_OFFSET + 2,
	EEP_SENSOR_SELECT = EEP_CAL_DEFAULT_HUM + 2,
	
	EEP_TSTAT_NAME1, 
	EEP_TSTAT_NAME2 = EEP_TSTAT_NAME1 + 2, 
	EEP_TSTAT_NAME3 = EEP_TSTAT_NAME2 + 2, 
	EEP_TSTAT_NAME4 = EEP_TSTAT_NAME3 + 2, 
	EEP_TSTAT_NAME5 = EEP_TSTAT_NAME4 + 2, 
	EEP_TSTAT_NAME6 = EEP_TSTAT_NAME5 + 2, 
	EEP_TSTAT_NAME7 = EEP_TSTAT_NAME6 + 2, 
	EEP_TSTAT_NAME8 = EEP_TSTAT_NAME7 + 2, 
	EEP_TSTAT_NAME9 = EEP_TSTAT_NAME8 + 2, 
	EEP_TSTAT_NAME10 = EEP_TSTAT_NAME9 + 2, 
	EEP_NAME_END = EEP_TSTAT_NAME10 + 2,
	EEP_OUTPUT_HUM_VOL_OFFSET,	 
	EEP_OUTPUT_TEMP_VOL_OFFSET = EEP_OUTPUT_HUM_VOL_OFFSET + 2,	
	EEP_OUTPUT_CO2_VOL_OFFSET = EEP_OUTPUT_TEMP_VOL_OFFSET + 2,	 
	EEP_OUTPUT_HUM_CUR_OFFSET = EEP_OUTPUT_CO2_VOL_OFFSET +2,	 
	EEP_OUTPUT_TEMP_CUR_OFFSET = EEP_OUTPUT_HUM_CUR_OFFSET + 2,
	EEP_OUTPUT_CO2_CUR_OFFSET = EEP_OUTPUT_TEMP_CUR_OFFSET +2,	 
	EEP_OUTPUT_SEL = EEP_OUTPUT_CO2_CUR_OFFSET + 2,
	EEP_REPLY_DELAY,
	EEP_RECEIVE_DELAY,
	
	
	EEP_PID_TEST,
	EEP_PID1_MODE,
	EEP_PID1_COOL_TABLE ,
	EEP_PID1_HEAT_TABLE,
	EEP_PID1_SETPOINT,
	EEP_PID1_COOL_DB = EEP_PID1_SETPOINT + 2,
	EEP_PID1_HEAT_DB = EEP_PID1_COOL_DB + 2,
	EEP_PID1_PTERM = EEP_PID1_HEAT_DB + 2,
	EEP_PID1_ITERM,
	
	EEP_PID2_MODE,
	EEP_PID2_COOL_TABLE ,
	EEP_PID2_HEAT_TABLE,
	EEP_PID2_SETPOINT,
	EEP_PID2_COOL_DB = EEP_PID2_SETPOINT + 2,
	EEP_PID2_HEAT_DB = EEP_PID2_COOL_DB + 2,
	EEP_PID2_PTERM = EEP_PID2_HEAT_DB + 2,
	EEP_PID2_ITERM, 
	
	EEP_PID3_MODE,
	EEP_PID3_COOL_TABLE ,
	EEP_PID3_HEAT_TABLE,
	EEP_PID3_SETPOINT,
	EEP_PID3_COOL_DB = EEP_PID3_SETPOINT + 2,
	EEP_PID3_HEAT_DB = EEP_PID3_COOL_DB + 2,
	EEP_PID3_PTERM = EEP_PID3_HEAT_DB + 2,
	EEP_PID3_ITERM, 
	EEP_MODE_SELECT,
	EEP_UART1_PARITY,
	EEP_END,
	
} EEP_MAP;

#ifdef CO2_SENSOR
typedef enum
{
	MODBUS_SERIALNUMBER_LOWORD = 0,             
	MODBUS_SERIALNUMBER_HIWORD = 2,
	MODBUS_VERSION_NUMBER_LO = 4,
	MODBUS_VERSION_NUMBER_HI = 5,
	MODBUS_ADDRESS = 6,
	MODBUS_PRODUCT_MODEL,
	MODBUS_HARDWARE_REV,
	//MODBUS_PIC_VERSION,
	MODBUS_ADDRESS_PLUG_N_PLAY,
	MODBUS_SENSOR_TYPE = 14,
	MODBUS_BAUDRATE = 15,			// base address select
	MODBUS_UPDATE_STATUS = 16,			// status for update flash
	
	MODBUS_PROTOCOL_TYPE = 21,
	
	MODBUS_MAC_ADDRESS_1	= 40,
	MODBUS_MAC_ADDRESS_2,
	MODBUS_MAC_ADDRESS_3,
	MODBUS_MAC_ADDRESS_4,
	MODBUS_MAC_ADDRESS_5,
	MODBUS_MAC_ADDRESS_6,	
	MODBUS_IP_MODE		= 46,
	MODBUS_IP_ADDRESS_1	= 47,
	MODBUS_IP_ADDRESS_2 = 48,
	MODBUS_IP_ADDRESS_3 = 49,
	MODBUS_IP_ADDRESS_4 = 50,
	
	MODBUS_SUB_MASK_ADDRESS_1 = 51,
	MODBUS_SUB_MASK_ADDRESS_2 = 52,
	MODBUS_SUB_MASK_ADDRESS_3 = 53,
	MODBUS_SUB_MASK_ADDRESS_4 = 54,
	
	MODBUS_GATEWAY_ADDRESS_1 = 55,
	MODBUS_GATEWAY_ADDRESS_2 = 56,
	MODBUS_GATEWAY_ADDRESS_3 = 57,
	MODBUS_GATEWAY_ADDRESS_4 = 58,
	
	MODBUS_TCP_SERVER   = 59,
	MODBUS_LISTEN_PORT	= 60,
	 
	MODBUS_GHOST_IP_MODE		= 61,
	MODBUS_GHOST_IP_ADDRESS_1	= 62,
	MODBUS_GHOST_IP_ADDRESS_2 = 63,
	MODBUS_GHOST_IP_ADDRESS_3 = 64,
	MODBUS_GHOST_IP_ADDRESS_4 = 65,
	
	MODBUS_GHOST_SUB_MASK_ADDRESS_1 = 66,
	MODBUS_GHOST_SUB_MASK_ADDRESS_2 = 67,
	MODBUS_GHOST_SUB_MASK_ADDRESS_3 = 68,
	MODBUS_GHOST_SUB_MASK_ADDRESS_4 = 69,
	
	MODBUS_GHOST_GATEWAY_ADDRESS_1 = 70,
	MODBUS_GHOST_GATEWAY_ADDRESS_2 = 71,
	MODBUS_GHOST_GATEWAY_ADDRESS_3 = 72,
	MODBUS_GHOST_GATEWAY_ADDRESS_4 = 73,
	
	MODBUS_GHOST_TCP_SERVER   = 74,
	MODBUS_GHOST_LISTEN_PORT	= 75,
	
	
	MODBUS_WRITE_GHOST_SYSTEM = 76 ,
	MODBUS_MAC_ENABLE		  =  93,	
	MODBUS_SERINALNUMBER_WRITE_FLAG = 99,
	
	
	
	MODBUS_TEMPERATURE_SENSOR_SELECT = ORIGINALADDRESSVALUE,
	MODBUS_TEMPERATURE_DEGREE_C_OR_F,
	MODBUS_INTERNAL_TEMPERATURE_CELSIUS,
	MODBUS_INTERNAL_TEMPERATURE_FAHRENHEIT,
	MODBUS_EXTERNAL_TEMPERATURE_CELSIUS,
	MODBUS_EXTERNAL_TEMPERATURE_FAHRENHEIT, 
	MODBUS_TEMPERATURE_OFFSET_INTERNAL,

	MODBUS_HUMIDITY, // 207
	MODBUS_HUMIDITY_FREQUENCY,
	MODBUS_HUM_SENSOR_HEATING,

	MODBUS_CO2_INTERNAL_EXIST, // 210
	MODBUS_CO2_INTERNAL,
	MODBUS_CO2_INTERNAL_OFFSET,
	MODBUS_CO2_INTERNAL_PREALARM_SETPOINT,
	MODBUS_CO2_INTERNAL_ALARM_SETPOINT,

	MODBUS_CO2_EXTERNAL_START, // 215
	MODBUS_CO2_EXTERANL_END = MODBUS_CO2_EXTERNAL_START + MAX_EXT_CO2, // 215 + 254
	MODBUS_CO2_EXTERNAL_OFFSET_START = MODBUS_CO2_EXTERANL_END, // 469
	MODBUS_CO2_EXTERNAL_OFFSET_END = MODBUS_CO2_EXTERNAL_OFFSET_START + MAX_EXT_CO2, // 469 + 254
	MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_START = MODBUS_CO2_EXTERNAL_OFFSET_END, // 723
	MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_END = MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_START + MAX_EXT_CO2, // 723 + 254
	MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_START = MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_END, // 977
	MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_END = MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_START + MAX_EXT_CO2, // 977 + 254

	MODBUS_CO2_SLOPE_DETECT_VALUE = MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_END,	// 1231
	MODBUS_CO2_FILTER,		// 1232

	MODBUS_PASSWORD_ENABLE,	// 1233
	MODBUS_USER_PASSWORD0, 					
	MODBUS_USER_PASSWORD1,
	MODBUS_USER_PASSWORD2,
	MODBUS_USER_PASSWORD3,

	MODBUS_RTC_CENTURY, // 1238
	MODBUS_RTC_YEAR,
	MODBUS_RTC_MONTH,
	MODBUS_RTC_DAY,
	MODBUS_RTC_WEEK,
	MODBUS_RTC_HOUR,
	MODBUS_RTC_MINUTE,
	MODBUS_RTC_SECOND,

	MODBUS_ALARM_AUTO_MANUAL,	// 1246, bit7: 0 = auto, 1 = manual; bit0:1 = pre_alarm; bit1: 1 = continuous_alarm; bit(1:0): 00 = stop_ alarm		
	MODBUS_PRE_ALARM_SETTING_ON_TIME,
	MODBUS_PRE_ALARM_SETTING_OFF_TIME,
	MODBUS_ALARM_DELAY_TIME,

	MODBUS_OUTPUT_AUTO_MANUAL,		// 1250
	MODBUS_OUTPUT_MANUAL_VALUE_TEM,
	MODBUS_OUTPUT_MANUAL_VALUE_HUM,
	MODBUS_OUTPUT_MANUAL_VALUE_CO2,

	MODBUS_OUTPUT_MODE,				// 1254
	MODBUS_OUTPUT_RANGE_MIN_TEM,	// 1255				
	MODBUS_OUTPUT_RANGE_MAX_TEM,
	MODBUS_OUTPUT_RANGE_MIN_HUM,				
	MODBUS_OUTPUT_RANGE_MAX_HUM,
	MODBUS_OUTPUT_RANGE_MIN_CO2,				
	MODBUS_OUTPUT_RANGE_MAX_CO2,

	MODBUS_MENU_BLOCK_SECONDS,		// 1261
	MODBUS_BACKLIGHT_KEEP_SECONDS,

	MODBUS_EXTERNAL_NODES_PLUG_AND_PLAY, // 1263

	MODBUS_SCAN_DB_CTR,		// 1264
	MODBUS_RESET_SCAN_DB,					
	MODBUS_SCAN_START,		// 1266						
	MODBUS_SCAN_END = MODBUS_SCAN_START + SCAN_DB_SIZE * MAX_EXT_CO2,	// 1266 + 5*254

	MODBUS_GET_NODES_PARA_START = MODBUS_SCAN_END,						// 2536
	MODBUS_GET_NODES_PARA_END = MODBUS_GET_NODES_PARA_START + 32,		// 2536 + 32

	MODBUS_SCAN_OCCUPY_START = MODBUS_GET_NODES_PARA_END,				// 2568
	MODBUS_SCAN_OCCUPY_END = MODBUS_SCAN_OCCUPY_START + 32,				// 2568 + 32

	MODBUS_SCAN_ONLINE_START = MODBUS_SCAN_OCCUPY_END,					// 2600
	MODBUS_SCAN_ONLINE_END = MODBUS_SCAN_ONLINE_START + 32,				// 2600 + 32

	MODBUS_IDLE_ID = MODBUS_SCAN_ONLINE_END,							//2632
	
		
	MODBUS_INT_TEMPRATURE_FILTER = 3000, //2650
	MODBUS_EXT_TEMPRATURE_FILTER, 
	MODBUS_HUIDITY_FILTER,
	
	MODBUS_HUM_VERSION, 	// 
	MODBUS_HUM_SN,			// 
	MODBUS_CAL_FAC_PTS,		// 3005			  
	MODBUS_TABLE_SEL, 		// 3006 
   
    MODBUS_HUMCOUNT1_H ,	// 3007	     
	MODBUS_HUMRH1_H	,				 
	MODBUS_HUMCOUNT2_H ,			 
	MODBUS_HUMRH2_H	,				 
	MODBUS_HUMCOUNT3_H ,			 
	MODBUS_HUMRH3_H	,				 
	MODBUS_HUMCOUNT4_H ,			 
	MODBUS_HUMRH4_H	,				 
	MODBUS_HUMCOUNT5_H ,			 
	MODBUS_HUMRH5_H	,				 
	MODBUS_HUMCOUNT6_H ,			 
	MODBUS_HUMRH6_H	,				 
	MODBUS_HUMCOUNT7_H ,			 
	MODBUS_HUMRH7_H	,				 
	MODBUS_HUMCOUNT8_H ,			 
	MODBUS_HUMRH8_H	,				 
	MODBUS_HUMCOUNT9_H ,			 
	MODBUS_HUMRH9_H	,				 
	MODBUS_HUMCOUNT10_H ,			 
	MODBUS_HUMRH10_H,		// 3026
	
	MODBUS_USER_POINTS, 	// 3027
	
	MODBUS_USER_RH1,   // 
	MODBUS_USER_FRE1,
	MODBUS_USER_RH2,
	MODBUS_USER_FRE2,
	MODBUS_USER_RH3,
	MODBUS_USER_FRE3,
	MODBUS_USER_RH4,
	MODBUS_USER_FRE4,
	MODBUS_USER_RH5,
	MODBUS_USER_FRE5,
	MODBUS_USER_RH6,
	MODBUS_USER_FRE6,
	MODBUS_USER_RH7,
	MODBUS_USER_FRE7,
	MODBUS_USER_RH8,
	MODBUS_USER_FRE8,
	MODBUS_USER_RH9,
	MODBUS_USER_FRE9,
	MODBUS_USER_RH10,
	MODBUS_USER_FRE10,  	// 3047
	
	MODBUS_DIS_INFO,    	//3048
	MODBUS_DEW_PT,			//unit.C
	MODBUS_DEW_PT_F,		//unit.F  
	MODBUS_DEW_PT_MIN, 		//the default value = 70 C
	MODBUS_DEW_PT_MAX,		//the default value = -30C	
	MODBUS_PWS,				//unit.hPa
	MODBUS_MIX_RATIO,		//unit.g/kg
	MODBUS_ENTHALPY,		//unit.kJ/kg 
	
	MODBUS_TEMP_OFFSET,     // 3056
	MODBUS_HUM_OFFSET ,     // 
	MODBUS_CAL_DEFAULT_HUM, // 
	
	MODBUS_K_LINE,
	MODBUS_B_LINE,		    //3060	
	
	MODBUS_AD_OUTPUT_FB_HUM,        // 3061
	MODBUS_AD_OUTPUT_FB_TEMP,       //   
	MODBUS_AD_OUTPUT_FB_CO2,        //  
	MODBUS_AD_INTERNAL_TEMP,		//
	MODBUS_AD_PRE,					// 3065
	MODBUS_OUTPUT_HUM,              // 3066
	MODBUS_OUTPUT_TEMP,             //  
	MODBUS_OUTPUT_CO2,              // 
	MODBUS_HUM_SENSOR_STATE,		//3069
	MODBUS_OUTPUT_HUM_VOL_OFFSET,	//3070
	MODBUS_OUTPUT_TEMP_VOL_OFFSET,	
	MODBUS_OUTPUT_CO2_VOL_OFFSET,	//3072
	MODBUS_OUTPUT_HUM_CUR_OFFSET,	//3073
	MODBUS_OUTPUT_TEMP_CUR_OFFSET,
	MODBUS_OUTPUT_CO2_CUR_OFFSET,	//3075
	MODBUS_OUTPUT_SEL,
	MODBUS_REPLY_DELAY,
	MODBUS_RECEIVE_DELAY,
	MODBUS_UART1_PARITY,
	MODBUS_PID1_MODE	=3100,//0=COOL MODE,1=HEAT MODE	 
	MODBUS_PID1_SETPOINT, 
	MODBUS_PID1_PTERM,
	MODBUS_PID1_ITERM,
	MODBUS_PID1_PID,
	MODBUS_PID2_MODE	=3110,//0=COOL MODE,1=HEAT MODE	 
	MODBUS_PID2_SETPOINT, 
	MODBUS_PID2_PTERM,
	MODBUS_PID2_ITERM,
	MODBUS_PID2_PID,
	MODBUS_PID3_MODE	=3120,//0=COOL MODE,1=HEAT MODE	 
	MODBUS_PID3_SETPOINT, 
	MODBUS_PID3_PTERM,
	MODBUS_PID3_ITERM,
	MODBUS_PID3_PID,
	MODBUS_MODE_SELECT =3130,    //0 = TRANSMIT, 1 = PID,
	
	
	MODBUS_PRESSURE_SENSOR_MODEL =4000 , 			// 0=26PCF (0-100PSI),1=26PCG (0-250PSI), 10 = MPXV7002(-8 ~ +8 inWC),11=MPXV7007(-27 ~ +27 inWC)
	MODBUS_PRESSURE_UNIT,
	MODBUS_PRESSURE_UNIT_DEFAULT,
	MODBUS_OUTPUT_RANGE_MIN_PRESSURE,				//the same to MODBUS_OUTPUT_RANGE_MIN_CO2		
	MODBUS_OUTPUT_RANGE_MAX_PRESSURE,	
	MODBUS_PRESSURE_FILTER,  			//705
	MODBUS_PRESSURE_SLOPE,
	MODBUS_PRESSURE_INTERCEPT,   
	MODBUS_INPUT_AUTO_MANUAL_PRE,					//the same to MODBUS_OUTPUT_MANUAL_VALUE_CO2		 
	MODBUS_INPUTPUT_MANUAL_VALUE_PRE,				//the same to MODBUS_OUTPUT_AUTO_MANUAL
	MODBUS_PREESURE_AD,      			//710
	MODBUS_PRESSURE_VALUE_ORG,
	MODBUS_PRESSURE_VALUE_ORG_OFFSET,      
	MODBUS_PRESSURE_VALUE_INDEX,
	MODBUS_PRESSURE_VALUE_BASE_L,     
	MODBUS_PRESSURE_VALUE_BASE_H,		//715
	MODBUS_PRESSURE_CAL_POINT,
	MODBUS_PRESSURE_CAL_PR0,          
    MODBUS_PRESSURE_CAL_AD0,
	MODBUS_PRESSURE_CAL_PR1,        				//pressure calibrate
    MODBUS_PRESSURE_CAL_AD1,			//720   	
    MODBUS_PRESSURE_CAL_PR2,         
    MODBUS_PRESSURE_CAL_AD2,			 
    MODBUS_PRESSURE_CAL_PR3,          
    MODBUS_PRESSURE_CAL_AD3, 
    MODBUS_PRESSURE_CAL_PR4,          	//725
    MODBUS_PRESSURE_CAL_AD4, 
    MODBUS_PRESSURE_CAL_PR5,          
    MODBUS_PRESSURE_CAL_AD5, 
    MODBUS_PRESSURE_CAL_PR6,          
    MODBUS_PRESSURE_CAL_AD6,  			//730
    MODBUS_PRESSURE_CAL_PR7,          
    MODBUS_PRESSURE_CAL_AD7, 
    MODBUS_PRESSURE_CAL_PR8,          
    MODBUS_PRESSURE_CAL_AD8, 
    MODBUS_PRESSURE_CAL_PR9,          	//735
    MODBUS_PRESSURE_CAL_AD9,  
	MODBUS_USER_CAL_POINT, 
	MODBUS_USER_CAL_PR0,
	MODBUS_USER_CAL_AD0, 				//740
	MODBUS_USER_CAL_PR9 = MODBUS_USER_CAL_PR0 + 18,
	MODBUS_USER_CAL_AD9, 
	MODBUS_SENSOR_STATUS,				//760
	MODBUS_SENSOR_TEST0,
	MODBUS_SENSOR_TEST1,
	MODBUS_SENSOR_TEST2,
	MODBUS_PRESSURE_VALUE_AD  ,
	MODBUS_PRESSURE_TEMPER_AD,
	MODBUS_PRESSURE_VALUE,
	MODBUS_PRESSURE_TEMPER,
	MODBUS_PRESSURE_STATUS,
	MODBUS_PRESSURE_READ_ENABLE,
	MODBUS_PRESSURE_READ_ALL,
	MODBUS_PRESSURE_READ_ONLY,
	MODBUS_PRESSURE_OFFSET,
	
	
	
 
	MODBUS_RESET = 5000,
	MODBUS_TEST0	,
	MODBUS_TEST1	,
	MODBUS_TEST2   ,
	MODBUS_TEST3   ,
	MODBUS_TEST4   ,
	MODBUS_TEST5   ,
	MODBUS_TEST6   ,

	MODBUS_TEST7   ,
	MODBUS_TEST8   ,
	MODBUS_TEST9   ,
	MODBUS_TEST10  ,
	MODBUS_TEST11  ,
	MODBUS_TEST12  ,
	MODBUS_TEST13  ,
	MODBUS_TEST14  ,
	MODBUS_TEST15  ,
	MODBUS_TEST16  ,
	MODBUS_TEST17  ,
	MODBUS_TEST18  ,
	MODBUS_TEST19  ,
	
	
	
MODBUS_USER_BLOCK_FIRST = 9999 ,
	 
	MODBUS_OUTPUT_BLOCK_FIRST = 10000,      
	MODBUS_OUTPUT_BLOCK_LAST  = MODBUS_OUTPUT_BLOCK_FIRST + MAX_OUTS * ((sizeof(Str_out_point) + 1)/ 2) - 1,
	
	MODBUS_INPUT_BLOCK_FIRST  =  MODBUS_OUTPUT_BLOCK_FIRST + 64 * ((sizeof(Str_out_point) + 1)/ 2),
	MODBUS_INPUT_BLOCK_LAST   = MODBUS_INPUT_BLOCK_FIRST + MAX_INS * ((sizeof(Str_in_point) + 1) / 2) - 1,

	MODBUS_VAR_BLOCK_FIRST    = MODBUS_INPUT_BLOCK_FIRST + 64 * ((sizeof(Str_in_point) + 1) / 2),
	MODBUS_VAR_BLOCK_LAST     = MODBUS_VAR_BLOCK_FIRST + MAX_AVS * ((sizeof(Str_variable_point) + 1) / 2) - 1,
	
	MODBUS_PRG_BLOCK_FIRST    = MODBUS_VAR_BLOCK_FIRST + 128 * ((sizeof(Str_variable_point) + 1) / 2),
	MODBUS_PRG_BLOCK_LAST     = MODBUS_PRG_BLOCK_FIRST + MAX_PRGS * ((sizeof(Str_program_point) + 1) / 2) - 1,
		
	MODBUS_WR_BLOCK_FIRST     = MODBUS_PRG_BLOCK_FIRST + 16 * ((sizeof(Str_program_point) + 1) / 2),
	MODBUS_WR_BLOCK_LAST      = MODBUS_WR_BLOCK_FIRST + MAX_WR * ((sizeof(Str_weekly_routine_point) + 1) / 2) - 1,
		
	MODBUS_AR_BLOCK_FIRST     = MODBUS_WR_BLOCK_FIRST + 8 * ((sizeof(Str_weekly_routine_point) + 1) / 2),
	MODBUS_AR_BLOCK_LAST      = MODBUS_AR_BLOCK_FIRST + MAX_AR * ((sizeof(Str_annual_routine_point) + 1) / 2) - 1,
		
	MODBUS_CODE_BLOCK_FIRST   = MODBUS_AR_BLOCK_FIRST + 4 * ((sizeof(Str_annual_routine_point) + 1) / 2),
	MODBUS_CODE_BLOCK_LAST    = MODBUS_CODE_BLOCK_FIRST + MAX_PRGS * (CODE_ELEMENT * MAX_CODE / 2) - 1,
	
	//16044 - 32043// 1000*16 
	MODBUS_WR_TIME_FIRST      = MODBUS_CODE_BLOCK_FIRST + 16 * (CODE_ELEMENT * MAX_CODE / 2), 
	MODBUS_WR_TIME_LAST       = MODBUS_WR_TIME_FIRST + MAX_WR * ((sizeof(Wr_one_day) * MAX_SCHEDULES_PER_WEEK + 1) / 2) - 1,
 
	//32044 - 32619  //576
	MODBUS_AR_TIME_FIRST      = MODBUS_WR_TIME_FIRST + 8 * ((sizeof(Wr_one_day) * MAX_SCHEDULES_PER_WEEK + 1) / 2), 
	MODBUS_AR_TIME_LAST       = MODBUS_AR_TIME_FIRST + MAX_AR * (AR_DATES_SIZE / 2) - 1,

	//32620
	MODBUS_CONTROLLER_BLOCK_FIRST = MODBUS_AR_TIME_FIRST + 4 * (AR_DATES_SIZE / 2),
	MODBUS_CONTROLLER_BLOCK_LAST  = MODBUS_CONTROLLER_BLOCK_FIRST + MAX_CONS * ((sizeof(Str_controller_point) + 1)/ 2) - 1,
	
	MODBUS_USER_BLOCK_LAST ,  
 
	MODBUS_HUMIDITY_SPARE,
	MODBUS_BAUDRATE_SPARE,
	MODBUS_OUTPUT_MODE_SPARE,
	MODBUS_OUTPUT_AUTO_MANUAL_SPARE,		 
	MODBUS_OUTPUT_MANUAL_VALUE_TEM_SPARE,
	MODBUS_OUTPUT_MANUAL_VALUE_HUM_SPARE,
	MODBUS_OUTPUT_MANUAL_VALUE_CO2_SPARE,

	MODBUS_OUTPUT_MODE_SPARE1,				 
	MODBUS_OUTPUT_RANGE_MIN_TEM_SPARE,	 			
	MODBUS_OUTPUT_RANGE_MAX_TEM_SPARE,
	MODBUS_OUTPUT_RANGE_MIN_HUM_SPARE,				
	MODBUS_OUTPUT_RANGE_MAX_HUM_SPARE,
	MODBUS_OUTPUT_RANGE_MIN_CO2_SPARE,				
	MODBUS_OUTPUT_RANGE_MAX_CO2_SPARE,
} 
MODBUS_REGISTER_LIST;
#elif defined HUM_SENSOR 
typedef enum
{
	MODBUS_SERIALNUMBER_LOWORD = 0,             
	MODBUS_SERIALNUMBER_HIWORD = 2,
	MODBUS_VERSION_NUMBER_LO = 4,
	MODBUS_VERSION_NUMBER_HI = 5,
	MODBUS_ADDRESS = 6,
	MODBUS_PRODUCT_MODEL,
	MODBUS_HARDWARE_REV,
	MODBUS_HUM_VERSION = 9, 	 	//hum sensor version	 
	MODBUS_ADDRESS_PLUG_N_PLAY,
	MODBUS_SENSOR_TYPE = 14,
	MODBUS_BAUDRATE = 15,			// base address select
	MODBUS_UPDATE_STATUS = 16,			// status for update flash
	
	MODBUS_PROTOCOL_TYPE = 21,
	
	MODBUS_MAC_ADDRESS_1	= 40,
	MODBUS_MAC_ADDRESS_2,
	MODBUS_MAC_ADDRESS_3,
	MODBUS_MAC_ADDRESS_4,
	MODBUS_MAC_ADDRESS_5,
	MODBUS_MAC_ADDRESS_6,	
	MODBUS_IP_MODE		= 46,
	MODBUS_IP_ADDRESS_1	= 47,
	MODBUS_IP_ADDRESS_2 = 48,
	MODBUS_IP_ADDRESS_3 = 49,
	MODBUS_IP_ADDRESS_4 = 50,
	
	MODBUS_SUB_MASK_ADDRESS_1 = 51,
	MODBUS_SUB_MASK_ADDRESS_2 = 52,
	MODBUS_SUB_MASK_ADDRESS_3 = 53,
	MODBUS_SUB_MASK_ADDRESS_4 = 54,
	
	MODBUS_GATEWAY_ADDRESS_1 = 55,
	MODBUS_GATEWAY_ADDRESS_2 = 56,
	MODBUS_GATEWAY_ADDRESS_3 = 57,
	MODBUS_GATEWAY_ADDRESS_4 = 58,
	
	MODBUS_TCP_SERVER   = 59,
	MODBUS_LISTEN_PORT	= 60,
	
	
	MODBUS_GHOST_IP_MODE		= 61,
	MODBUS_GHOST_IP_ADDRESS_1	= 62,
	MODBUS_GHOST_IP_ADDRESS_2 = 63,
	MODBUS_GHOST_IP_ADDRESS_3 = 64,
	MODBUS_GHOST_IP_ADDRESS_4 = 65,
	
	MODBUS_GHOST_SUB_MASK_ADDRESS_1 = 66,
	MODBUS_GHOST_SUB_MASK_ADDRESS_2 = 67,
	MODBUS_GHOST_SUB_MASK_ADDRESS_3 = 68,
	MODBUS_GHOST_SUB_MASK_ADDRESS_4 = 69,
	
	MODBUS_GHOST_GATEWAY_ADDRESS_1 = 70,
	MODBUS_GHOST_GATEWAY_ADDRESS_2 = 71,
	MODBUS_GHOST_GATEWAY_ADDRESS_3 = 72,
	MODBUS_GHOST_GATEWAY_ADDRESS_4 = 73,
	
	MODBUS_GHOST_TCP_SERVER   = 74,
	MODBUS_GHOST_LISTEN_PORT	= 75,
	
	
	MODBUS_WRITE_GHOST_SYSTEM = 76 ,
	MODBUS_MAC_ENABLE		  =  93,	
	MODBUS_SERINALNUMBER_WRITE_FLAG = 99,
	
	



	MODBUS_EXTERNAL_TEMPERATURE_FAHRENHEIT = 100, 
	MODBUS_EXTERNAL_TEMPERATURE_CELSIUS = 101,
	MODBUS_TEMPERATURE_DEGREE_C_OR_F = 121,
	MODBUS_BAUDRATE_SPARE = 185,
	MODBUS_OUTPUT_MODE = 186,
	MODBUS_OUTPUT_MODE_SPARE = 187,

	
				 
	MODBUS_OUTPUT_RANGE_MIN_TEM = 285,	 			
	MODBUS_OUTPUT_RANGE_MAX_TEM = 286,
	MODBUS_OUTPUT_RANGE_MIN_HUM = 287,				
	MODBUS_OUTPUT_RANGE_MAX_HUM = 288,
	MODBUS_OUTPUT_RANGE_MIN_CO2 = 289,				
	MODBUS_OUTPUT_RANGE_MAX_CO2 = 290,
	
	MODBUS_HUMIDITY = 304, 
	MODBUS_OUTPUT_AUTO_MANUAL = 370,		 
	MODBUS_OUTPUT_MANUAL_VALUE_TEM = 371,
	MODBUS_OUTPUT_MANUAL_VALUE_HUM = 372, 
	MODBUS_HUMIDITY_SPARE = 373, // 207
	MODBUS_HUMIDITY_FREQUENCY = 374,
	MODBUS_OUTPUT_MANUAL_VALUE_CO2 = 375,
	MODBUS_HUMCOUNT1_H = 381,	    
	MODBUS_HUMRH1_H	,				 
	MODBUS_HUMCOUNT2_H ,			 
	MODBUS_HUMRH2_H	,				 
	MODBUS_HUMCOUNT3_H ,			 
	MODBUS_HUMRH3_H	,				 
	MODBUS_HUMCOUNT4_H ,			 
	MODBUS_HUMRH4_H	,				 
	MODBUS_HUMCOUNT5_H ,			 
	MODBUS_HUMRH5_H	,				 
	MODBUS_HUMCOUNT6_H ,			 
	MODBUS_HUMRH6_H	,				 
	MODBUS_HUMCOUNT7_H ,			 
	MODBUS_HUMRH7_H	,				 
	MODBUS_HUMCOUNT8_H ,			 
	MODBUS_HUMRH8_H	,				 
	MODBUS_HUMCOUNT9_H ,			 
	MODBUS_HUMRH9_H	,				 
	MODBUS_HUMCOUNT10_H ,			 
	MODBUS_HUMRH10_H,		 
		
	MODBUS_TEMP_OFFSET = 450,      
	MODBUS_HUM_OFFSET  = 451,    
	MODBUS_EXT_TEMPRATURE_FILTER, 
	MODBUS_HUIDITY_FILTER,
	MODBUS_TABLE_SEL = 454, 
	MODBUS_USER_POINTS =455,  
	MODBUS_USER_RH1 = 456,     
	MODBUS_USER_FRE1,
	MODBUS_USER_RH2,
	MODBUS_USER_FRE2,
	MODBUS_USER_RH3,
	MODBUS_USER_FRE3,
	MODBUS_USER_RH4,
	MODBUS_USER_FRE4,
	MODBUS_USER_RH5,
	MODBUS_USER_FRE5,
	MODBUS_USER_RH6,
	MODBUS_USER_FRE6,
	MODBUS_USER_RH7,
	MODBUS_USER_FRE7,
	MODBUS_USER_RH8,
	MODBUS_USER_FRE8,
	MODBUS_USER_RH9,
	MODBUS_USER_FRE9,
	MODBUS_USER_RH10,
	MODBUS_USER_FRE10,  	 
	MODBUS_K_LINE = 476,
	MODBUS_B_LINE = 477,	
	MODBUS_HUM_SN,	
	MODBUS_CAL_DEFAULT_HUM = 479,  	 
	MODBUS_CAL_FAC_PTS,		 
	MODBUS_DIS_INFO = 481,    	 
	MODBUS_DEW_PT = 482,			//unit.C
	MODBUS_DEW_PT_F = 483,		//unit.F  
	MODBUS_HUM_SENSOR_HEATING = 484,
	MODBUS_OUTPUT_SEL,				//0 = DEWPOINT output, 1 = Humidity output
	MODBUS_DEW_PT_MIN = 486, 		//the default value = 70 C
	MODBUS_DEW_PT_MAX = 487,		//the default value = -30C	
	MODBUS_PWS		  = 488,		//unit.hPa
	MODBUS_MIX_RATIO  = 489,		//unit.g/kg
	MODBUS_ENTHALPY   = 490,		//unit.kJ/kg 
	MODBUS_REPLY_DELAY,
	MODBUS_RECEIVE_DELAY,
	MODBUS_UART1_PARITY          = 495,      //0=none,1=odd,2=even.
	
	MODBUS_PID1_MODE	=500,//0=COOL MODE,1=HEAT MODE	 
	MODBUS_PID1_SETPOINT, 
	MODBUS_PID1_PTERM,
	MODBUS_PID1_ITERM,
	MODBUS_PID1_PID,
	MODBUS_PID2_MODE	=510,//0=COOL MODE,1=HEAT MODE 
	MODBUS_PID2_SETPOINT, 
	MODBUS_PID2_PTERM,
	MODBUS_PID2_ITERM,
	MODBUS_PID2_PID,
	MODBUS_PID3_MODE	=520,//0=COOL MODE,1=HEAT MODE	 
	MODBUS_PID3_SETPOINT, 
	MODBUS_PID3_PTERM,
	MODBUS_PID3_ITERM,
	MODBUS_PID3_PID,
	MODBUS_MODE_SELECT =530,    //0 = TRANSMIT, 1 = PID,
	
	
	TSTAT_NAME_ENABLE = 714,//default value = 0x55 indicate tstat name function is present
	TSTAT_NAME1,
	TSTAT_NAME2,
	TSTAT_NAME3,
	TSTAT_NAME4,
	TSTAT_NAME5,
	TSTAT_NAME6,
	TSTAT_NAME7,
	TSTAT_NAME8,
	TSTAT_NAME9,
	TSTAT_NAME10,
	
	
	MODBUS_INT_TEMPRATURE_FILTER  ,  
	MODBUS_TEMPERATURE_SENSOR_SELECT ,
	
	MODBUS_INTERNAL_TEMPERATURE_CELSIUS,
	MODBUS_INTERNAL_TEMPERATURE_FAHRENHEIT,

	MODBUS_TEMPERATURE_OFFSET_INTERNAL,  
	MODBUS_CO2_INTERNAL_EXIST,  
	MODBUS_CO2_INTERNAL,
	MODBUS_CO2_INTERNAL_OFFSET,
	MODBUS_CO2_INTERNAL_PREALARM_SETPOINT,
	MODBUS_CO2_INTERNAL_ALARM_SETPOINT, 
	MODBUS_CO2_EXTERNAL_START, // 215
	MODBUS_CO2_EXTERANL_END,// = MODBUS_CO2_EXTERNAL_START + MAX_EXT_CO2, // 215 + 254
	MODBUS_CO2_EXTERNAL_OFFSET_START,// = MODBUS_CO2_EXTERANL_END, // 469
	MODBUS_CO2_EXTERNAL_OFFSET_END ,//= MODBUS_CO2_EXTERNAL_OFFSET_START + MAX_EXT_CO2, // 469 + 254
	MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_START,// = MODBUS_CO2_EXTERNAL_OFFSET_END, // 723
	MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_END,// = MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_START + MAX_EXT_CO2, // 723 + 254
	MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_START,// = MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_END, // 977
	MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_END,// = MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_START + MAX_EXT_CO2, // 977 + 254

	MODBUS_CO2_SLOPE_DETECT_VALUE,// = MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_END,	// 1231
	MODBUS_CO2_FILTER,		// 1232

	MODBUS_PASSWORD_ENABLE = 1233,	// 1233
	MODBUS_USER_PASSWORD0, 					
	MODBUS_USER_PASSWORD1,
	MODBUS_USER_PASSWORD2,
	MODBUS_USER_PASSWORD3,

	MODBUS_RTC_CENTURY, // 1238
	MODBUS_RTC_YEAR,
	MODBUS_RTC_MONTH,
	MODBUS_RTC_DAY,
	MODBUS_RTC_WEEK,
	MODBUS_RTC_HOUR,
	MODBUS_RTC_MINUTE,
	MODBUS_RTC_SECOND,

	MODBUS_ALARM_AUTO_MANUAL,	// 1246, bit7: 0 = auto, 1 = manual; bit0:1 = pre_alarm; bit1: 1 = continuous_alarm; bit(1:0): 00 = stop_ alarm		
	MODBUS_PRE_ALARM_SETTING_ON_TIME,
	MODBUS_PRE_ALARM_SETTING_OFF_TIME,
	MODBUS_ALARM_DELAY_TIME,

	MODBUS_OUTPUT_AUTO_MANUAL_SPARE = 1250,		// 1250
	MODBUS_OUTPUT_MANUAL_VALUE_TEM_SPARE,
	MODBUS_OUTPUT_MANUAL_VALUE_HUM_SPARE,
	MODBUS_OUTPUT_MANUAL_VALUE_CO2_SPARE,

	MODBUS_OUTPUT_MODE_SPARE1,				// 1254
	MODBUS_OUTPUT_RANGE_MIN_TEM_SPARE,	// 1255				
	MODBUS_OUTPUT_RANGE_MAX_TEM_SPARE,
	MODBUS_OUTPUT_RANGE_MIN_HUM_SPARE,				
	MODBUS_OUTPUT_RANGE_MAX_HUM_SPARE,
	MODBUS_OUTPUT_RANGE_MIN_CO2_SPARE,				
	MODBUS_OUTPUT_RANGE_MAX_CO2_SPARE,

	MODBUS_MENU_BLOCK_SECONDS,		// 1261
	MODBUS_BACKLIGHT_KEEP_SECONDS,

	MODBUS_EXTERNAL_NODES_PLUG_AND_PLAY, // 1263

	MODBUS_SCAN_DB_CTR,		// 1264
	MODBUS_RESET_SCAN_DB,					
	MODBUS_SCAN_START,		// 1266						
	MODBUS_SCAN_END,// = MODBUS_SCAN_START + SCAN_DB_SIZE * MAX_EXT_CO2,	// 1266 + 5*254

	MODBUS_GET_NODES_PARA_START,// = MODBUS_SCAN_END,						// 2536
	MODBUS_GET_NODES_PARA_END,// = MODBUS_GET_NODES_PARA_START + 32,		// 2536 + 32

	MODBUS_SCAN_OCCUPY_START,// = MODBUS_GET_NODES_PARA_END,				// 2568
	MODBUS_SCAN_OCCUPY_END,// = MODBUS_SCAN_OCCUPY_START + 32,				// 2568 + 32

	MODBUS_SCAN_ONLINE_START,// = MODBUS_SCAN_OCCUPY_END,					// 2600
	MODBUS_SCAN_ONLINE_END,// = MODBUS_SCAN_ONLINE_START + 32,				// 2600 + 32

	MODBUS_IDLE_ID = MODBUS_SCAN_ONLINE_END,							//2632
	
	
	
	MODBUS_AD_OUTPUT_FB_HUM = 3061, // 3061
	MODBUS_AD_OUTPUT_FB_TEMP,       //   
	MODBUS_AD_OUTPUT_FB_CO2,        //  
	MODBUS_AD_INTERNAL_TEMP,		//
	MODBUS_AD_PRE,					// 3065
	MODBUS_OUTPUT_HUM,              // 3066
	MODBUS_OUTPUT_TEMP,             //  
	MODBUS_OUTPUT_CO2,              // 
	MODBUS_HUM_SENSOR_STATE,		//3069
	MODBUS_OUTPUT_HUM_VOL_OFFSET,	//3070
	MODBUS_OUTPUT_TEMP_VOL_OFFSET,	
	MODBUS_OUTPUT_CO2_VOL_OFFSET,	//3072
	MODBUS_OUTPUT_HUM_CUR_OFFSET,	//3073
	MODBUS_OUTPUT_TEMP_CUR_OFFSET,
	MODBUS_OUTPUT_CO2_CUR_OFFSET,	//3075
	
	
	
	
	MODBUS_PRESSURE_SENSOR_MODEL =4000 , 			// 0=26PCF (0-100PSI),1=26PCG (0-250PSI), 10 = MPXV7002(-8 ~ +8 inWC),11=MPXV7007(-27 ~ +27 inWC)
	MODBUS_PRESSURE_UNIT,
	MODBUS_PRESSURE_UNIT_DEFAULT,
	MODBUS_OUTPUT_RANGE_MIN_PRESSURE,				//the same to MODBUS_OUTPUT_RANGE_MIN_CO2		
	MODBUS_OUTPUT_RANGE_MAX_PRESSURE,	
	MODBUS_PRESSURE_FILTER,  			//705
	MODBUS_PRESSURE_SLOPE,
	MODBUS_PRESSURE_INTERCEPT,   
	MODBUS_INPUT_AUTO_MANUAL_PRE,					//the same to MODBUS_OUTPUT_MANUAL_VALUE_CO2		 
	MODBUS_INPUTPUT_MANUAL_VALUE_PRE,				//the same to MODBUS_OUTPUT_AUTO_MANUAL
	MODBUS_PREESURE_AD,      			//710
	MODBUS_PRESSURE_VALUE_ORG,
	MODBUS_PRESSURE_VALUE_ORG_OFFSET,      
	MODBUS_PRESSURE_VALUE_INDEX,
	MODBUS_PRESSURE_VALUE_BASE_L,     
	MODBUS_PRESSURE_VALUE_BASE_H,		//715
	MODBUS_PRESSURE_CAL_POINT,
	MODBUS_PRESSURE_CAL_PR0,          
    MODBUS_PRESSURE_CAL_AD0,
	MODBUS_PRESSURE_CAL_PR1,        				//pressure calibrate
    MODBUS_PRESSURE_CAL_AD1,			//720   	
    MODBUS_PRESSURE_CAL_PR2,         
    MODBUS_PRESSURE_CAL_AD2,			 
    MODBUS_PRESSURE_CAL_PR3,          
    MODBUS_PRESSURE_CAL_AD3, 
    MODBUS_PRESSURE_CAL_PR4,          	//725
    MODBUS_PRESSURE_CAL_AD4, 
    MODBUS_PRESSURE_CAL_PR5,          
    MODBUS_PRESSURE_CAL_AD5, 
    MODBUS_PRESSURE_CAL_PR6,          
    MODBUS_PRESSURE_CAL_AD6,  			//730
    MODBUS_PRESSURE_CAL_PR7,          
    MODBUS_PRESSURE_CAL_AD7, 
    MODBUS_PRESSURE_CAL_PR8,          
    MODBUS_PRESSURE_CAL_AD8, 
    MODBUS_PRESSURE_CAL_PR9,          	//735
    MODBUS_PRESSURE_CAL_AD9,  
	MODBUS_USER_CAL_POINT, 
	MODBUS_USER_CAL_PR0,
	MODBUS_USER_CAL_AD0, 				//740
	MODBUS_USER_CAL_PR9 = MODBUS_USER_CAL_PR0 + 18,
	MODBUS_USER_CAL_AD9, 
	MODBUS_SENSOR_STATUS,				//760
	MODBUS_SENSOR_TEST0,
	MODBUS_SENSOR_TEST1,
	MODBUS_SENSOR_TEST2,
	MODBUS_PRESSURE_VALUE_AD  ,
	MODBUS_PRESSURE_TEMPER_AD,
	MODBUS_PRESSURE_VALUE,
	MODBUS_PRESSURE_TEMPER,
	MODBUS_PRESSURE_STATUS,
	MODBUS_PRESSURE_READ_ENABLE,
	MODBUS_PRESSURE_READ_ALL,
	MODBUS_PRESSURE_READ_ONLY,
	MODBUS_PRESSURE_OFFSET,
	
	
	
 
	MODBUS_RESET = 5000,
	MODBUS_TEST0	,
	MODBUS_TEST1	,
	MODBUS_TEST2   ,
	MODBUS_TEST3   ,
	MODBUS_TEST4   ,
	MODBUS_TEST5   ,
	MODBUS_TEST6   ,

	MODBUS_TEST7   ,
	MODBUS_TEST8   ,
	MODBUS_TEST9   ,
	MODBUS_TEST10  ,
	MODBUS_TEST11  ,
	MODBUS_TEST12  ,
	MODBUS_TEST13  ,
	MODBUS_TEST14  ,
	MODBUS_TEST15  ,
	MODBUS_TEST16  ,
	MODBUS_TEST17  ,
	MODBUS_TEST18  ,
	MODBUS_TEST19  ,
	
	
	
	MODBUS_USER_BLOCK_FIRST = 9999 ,
	 
	MODBUS_OUTPUT_BLOCK_FIRST = 10000,      
	MODBUS_OUTPUT_BLOCK_LAST  = MODBUS_OUTPUT_BLOCK_FIRST + MAX_OUTS * ((sizeof(Str_out_point) + 1)/ 2) - 1,
	
	MODBUS_INPUT_BLOCK_FIRST  =  MODBUS_OUTPUT_BLOCK_FIRST + 64 * ((sizeof(Str_out_point) + 1)/ 2),
	MODBUS_INPUT_BLOCK_LAST   = MODBUS_INPUT_BLOCK_FIRST + MAX_INS * ((sizeof(Str_in_point) + 1) / 2) - 1,

	MODBUS_VAR_BLOCK_FIRST    = MODBUS_INPUT_BLOCK_FIRST + 64 * ((sizeof(Str_in_point) + 1) / 2),
	MODBUS_VAR_BLOCK_LAST     = MODBUS_VAR_BLOCK_FIRST + MAX_AVS * ((sizeof(Str_variable_point) + 1) / 2) - 1,
	
	MODBUS_PRG_BLOCK_FIRST    = MODBUS_VAR_BLOCK_FIRST + 128 * ((sizeof(Str_variable_point) + 1) / 2),
	MODBUS_PRG_BLOCK_LAST     = MODBUS_PRG_BLOCK_FIRST + MAX_PRGS * ((sizeof(Str_program_point) + 1) / 2) - 1,
		
	MODBUS_WR_BLOCK_FIRST     = MODBUS_PRG_BLOCK_FIRST + 16 * ((sizeof(Str_program_point) + 1) / 2),
	MODBUS_WR_BLOCK_LAST      = MODBUS_WR_BLOCK_FIRST + MAX_WR * ((sizeof(Str_weekly_routine_point) + 1) / 2) - 1,
		
	MODBUS_AR_BLOCK_FIRST     = MODBUS_WR_BLOCK_FIRST + 8 * ((sizeof(Str_weekly_routine_point) + 1) / 2),
	MODBUS_AR_BLOCK_LAST      = MODBUS_AR_BLOCK_FIRST + MAX_AR * ((sizeof(Str_annual_routine_point) + 1) / 2) - 1,
		
	MODBUS_CODE_BLOCK_FIRST   = MODBUS_AR_BLOCK_FIRST + 4 * ((sizeof(Str_annual_routine_point) + 1) / 2),
	MODBUS_CODE_BLOCK_LAST    = MODBUS_CODE_BLOCK_FIRST + MAX_PRGS * (CODE_ELEMENT * MAX_CODE / 2) - 1,
	
	//16044 - 32043// 1000*16 
	MODBUS_WR_TIME_FIRST      = MODBUS_CODE_BLOCK_FIRST + 16 * (CODE_ELEMENT * MAX_CODE / 2), 
	MODBUS_WR_TIME_LAST       = MODBUS_WR_TIME_FIRST + MAX_WR * ((sizeof(Wr_one_day) * MAX_SCHEDULES_PER_WEEK + 1) / 2) - 1,
 
	//32044 - 32619  //576
	MODBUS_AR_TIME_FIRST      = MODBUS_WR_TIME_FIRST + 8 * ((sizeof(Wr_one_day) * MAX_SCHEDULES_PER_WEEK + 1) / 2), 
	MODBUS_AR_TIME_LAST       = MODBUS_AR_TIME_FIRST + MAX_AR * (AR_DATES_SIZE / 2) - 1,

	//32620
	MODBUS_CONTROLLER_BLOCK_FIRST = MODBUS_AR_TIME_FIRST + 4 * (AR_DATES_SIZE / 2),
	MODBUS_CONTROLLER_BLOCK_LAST  = MODBUS_CONTROLLER_BLOCK_FIRST + MAX_CONS * ((sizeof(Str_controller_point) + 1)/ 2) - 1,
	
	MODBUS_USER_BLOCK_LAST ,  	

} 
MODBUS_REGISTER_LIST;
#elif defined PRESSURE_SENSOR 
typedef enum
{
	MODBUS_SERIALNUMBER_LOWORD = 0,             
	MODBUS_SERIALNUMBER_HIWORD = 2,
	MODBUS_VERSION_NUMBER_LO = 4,
	MODBUS_VERSION_NUMBER_HI = 5,
	MODBUS_ADDRESS = 6,
	MODBUS_PRODUCT_MODEL,
	MODBUS_HARDWARE_REV,
	MODBUS_HUM_VERSION = 9, 	 	//hum sensor version	 
	MODBUS_ADDRESS_PLUG_N_PLAY,
	MODBUS_SENSOR_TYPE = 14,
	MODBUS_BAUDRATE = 15,			// base address select
	MODBUS_UPDATE_STATUS = 16,			// status for update flash
	
	MODBUS_PROTOCOL_TYPE = 21,
	
	MODBUS_MAC_ADDRESS_1	= 40,
	MODBUS_MAC_ADDRESS_2,
	MODBUS_MAC_ADDRESS_3,
	MODBUS_MAC_ADDRESS_4,
	MODBUS_MAC_ADDRESS_5,
	MODBUS_MAC_ADDRESS_6,	
	MODBUS_IP_MODE		= 46,
	MODBUS_IP_ADDRESS_1	= 47,
	MODBUS_IP_ADDRESS_2 = 48,
	MODBUS_IP_ADDRESS_3 = 49,
	MODBUS_IP_ADDRESS_4 = 50,
	
	MODBUS_SUB_MASK_ADDRESS_1 = 51,
	MODBUS_SUB_MASK_ADDRESS_2 = 52,
	MODBUS_SUB_MASK_ADDRESS_3 = 53,
	MODBUS_SUB_MASK_ADDRESS_4 = 54,
	
	MODBUS_GATEWAY_ADDRESS_1 = 55,
	MODBUS_GATEWAY_ADDRESS_2 = 56,
	MODBUS_GATEWAY_ADDRESS_3 = 57,
	MODBUS_GATEWAY_ADDRESS_4 = 58,
	
	MODBUS_TCP_SERVER   = 59,
	MODBUS_LISTEN_PORT	= 60,
	
	
	MODBUS_GHOST_IP_MODE		= 61,
	MODBUS_GHOST_IP_ADDRESS_1	= 62,
	MODBUS_GHOST_IP_ADDRESS_2 = 63,
	MODBUS_GHOST_IP_ADDRESS_3 = 64,
	MODBUS_GHOST_IP_ADDRESS_4 = 65,
	
	MODBUS_GHOST_SUB_MASK_ADDRESS_1 = 66,
	MODBUS_GHOST_SUB_MASK_ADDRESS_2 = 67,
	MODBUS_GHOST_SUB_MASK_ADDRESS_3 = 68,
	MODBUS_GHOST_SUB_MASK_ADDRESS_4 = 69,
	
	MODBUS_GHOST_GATEWAY_ADDRESS_1 = 70,
	MODBUS_GHOST_GATEWAY_ADDRESS_2 = 71,
	MODBUS_GHOST_GATEWAY_ADDRESS_3 = 72,
	MODBUS_GHOST_GATEWAY_ADDRESS_4 = 73,
	
	MODBUS_GHOST_TCP_SERVER   = 74,
	MODBUS_GHOST_LISTEN_PORT	= 75,
	
	
	MODBUS_WRITE_GHOST_SYSTEM = 76 ,
	MODBUS_MAC_ENABLE		  =  93,	
	MODBUS_SERINALNUMBER_WRITE_FLAG = 99,
	
	



	MODBUS_EXTERNAL_TEMPERATURE_FAHRENHEIT = 100, 
	MODBUS_EXTERNAL_TEMPERATURE_CELSIUS = 101,
	MODBUS_TEMPERATURE_DEGREE_C_OR_F = 121,
	MODBUS_BAUDRATE_SPARE = 185,
	MODBUS_OUTPUT_MODE = 186,
	MODBUS_OUTPUT_MODE_SPARE = 187,

	
				 
	MODBUS_OUTPUT_RANGE_MIN_TEM = 285,	 			
	MODBUS_OUTPUT_RANGE_MAX_TEM = 286,
	MODBUS_OUTPUT_RANGE_MIN_HUM = 287,				
	MODBUS_OUTPUT_RANGE_MAX_HUM = 288,
	MODBUS_OUTPUT_RANGE_MIN_CO2 = 289,				
	MODBUS_OUTPUT_RANGE_MAX_CO2 = 290,
	
	MODBUS_HUMIDITY = 304, 
	MODBUS_OUTPUT_AUTO_MANUAL = 370,		 
	MODBUS_OUTPUT_MANUAL_VALUE_TEM = 371,
	MODBUS_OUTPUT_MANUAL_VALUE_HUM = 372, 
	MODBUS_HUMIDITY_SPARE = 373, // 207
	MODBUS_HUMIDITY_FREQUENCY = 374,
	MODBUS_OUTPUT_MANUAL_VALUE_CO2 = 375,
	MODBUS_HUMCOUNT1_H = 381,	    
	MODBUS_HUMRH1_H	,				 
	MODBUS_HUMCOUNT2_H ,			 
	MODBUS_HUMRH2_H	,				 
	MODBUS_HUMCOUNT3_H ,			 
	MODBUS_HUMRH3_H	,				 
	MODBUS_HUMCOUNT4_H ,			 
	MODBUS_HUMRH4_H	,				 
	MODBUS_HUMCOUNT5_H ,			 
	MODBUS_HUMRH5_H	,				 
	MODBUS_HUMCOUNT6_H ,			 
	MODBUS_HUMRH6_H	,				 
	MODBUS_HUMCOUNT7_H ,			 
	MODBUS_HUMRH7_H	,				 
	MODBUS_HUMCOUNT8_H ,			 
	MODBUS_HUMRH8_H	,				 
	MODBUS_HUMCOUNT9_H ,			 
	MODBUS_HUMRH9_H	,				 
	MODBUS_HUMCOUNT10_H ,			 
	MODBUS_HUMRH10_H,		 
		
	MODBUS_TEMP_OFFSET = 450,      
	MODBUS_HUM_OFFSET  = 451,    
	MODBUS_EXT_TEMPRATURE_FILTER, 
	MODBUS_HUIDITY_FILTER,
	MODBUS_TABLE_SEL = 454, 
	MODBUS_USER_POINTS =455,  
	MODBUS_USER_RH1 = 456,     
	MODBUS_USER_FRE1,
	MODBUS_USER_RH2,
	MODBUS_USER_FRE2,
	MODBUS_USER_RH3,
	MODBUS_USER_FRE3,
	MODBUS_USER_RH4,
	MODBUS_USER_FRE4,
	MODBUS_USER_RH5,
	MODBUS_USER_FRE5,
	MODBUS_USER_RH6,
	MODBUS_USER_FRE6,
	MODBUS_USER_RH7,
	MODBUS_USER_FRE7,
	MODBUS_USER_RH8,
	MODBUS_USER_FRE8,
	MODBUS_USER_RH9,
	MODBUS_USER_FRE9,
	MODBUS_USER_RH10,
	MODBUS_USER_FRE10,  	 
	MODBUS_K_LINE = 476,
	MODBUS_B_LINE = 477,	
	MODBUS_HUM_SN,	
	MODBUS_CAL_DEFAULT_HUM = 479,  	 
	MODBUS_CAL_FAC_PTS,		 
	MODBUS_DIS_INFO = 481,    	 
	MODBUS_DEW_PT = 482,			//unit.C
	MODBUS_DEW_PT_F = 483,		//unit.F  
	MODBUS_HUM_SENSOR_HEATING = 484,
	MODBUS_OUTPUT_SEL,
	MODBUS_DEW_PT_MIN = 486, 		//the default value = 70 C
	MODBUS_DEW_PT_MAX = 487,		//the default value = -30C	
	MODBUS_PWS		  = 488,		//unit.hPa
	MODBUS_MIX_RATIO  = 489,		//unit.g/kg
	MODBUS_ENTHALPY   = 490,		//unit.kJ/kg 
	
	
	MODBUS_PRESSURE_SENSOR_MODEL =700 , 			// 0=26PCF (0-100PSI),1=26PCG (0-250PSI), 10 = MPXV7002(-8 ~ +8 inWC),11=MPXV7007(-27 ~ +27 inWC)
	MODBUS_PRESSURE_UNIT,
	MODBUS_PRESSURE_UNIT_DEFAULT,
	MODBUS_OUTPUT_RANGE_MIN_PRESSURE,				//the same to MODBUS_OUTPUT_RANGE_MIN_CO2		
	MODBUS_OUTPUT_RANGE_MAX_PRESSURE,	
	MODBUS_PRESSURE_FILTER,  			//705
	MODBUS_PRESSURE_SLOPE,
	MODBUS_PRESSURE_INTERCEPT,   
	MODBUS_INPUT_AUTO_MANUAL_PRE,					//the same to MODBUS_OUTPUT_MANUAL_VALUE_CO2		 
	MODBUS_INPUTPUT_MANUAL_VALUE_PRE,				//the same to MODBUS_OUTPUT_AUTO_MANUAL
	MODBUS_PREESURE_AD,      			//710
	MODBUS_PRESSURE_VALUE_ORG,
	MODBUS_PRESSURE_VALUE_ORG_OFFSET,      
	MODBUS_PRESSURE_VALUE_INDEX,
	MODBUS_PRESSURE_VALUE_BASE_L,     
	MODBUS_PRESSURE_VALUE_BASE_H,		//715
	MODBUS_PRESSURE_CAL_POINT,
	MODBUS_PRESSURE_CAL_PR0,          
    MODBUS_PRESSURE_CAL_AD0,
	MODBUS_PRESSURE_CAL_PR1,        				//pressure calibrate
    MODBUS_PRESSURE_CAL_AD1,			//720   	
    MODBUS_PRESSURE_CAL_PR2,         
    MODBUS_PRESSURE_CAL_AD2,			 
    MODBUS_PRESSURE_CAL_PR3,          
    MODBUS_PRESSURE_CAL_AD3, 
    MODBUS_PRESSURE_CAL_PR4,          	//725
    MODBUS_PRESSURE_CAL_AD4, 
    MODBUS_PRESSURE_CAL_PR5,          
    MODBUS_PRESSURE_CAL_AD5, 
    MODBUS_PRESSURE_CAL_PR6,          
    MODBUS_PRESSURE_CAL_AD6,  			//730
    MODBUS_PRESSURE_CAL_PR7,          
    MODBUS_PRESSURE_CAL_AD7, 
    MODBUS_PRESSURE_CAL_PR8,          
    MODBUS_PRESSURE_CAL_AD8, 
    MODBUS_PRESSURE_CAL_PR9,          	//735
    MODBUS_PRESSURE_CAL_AD9,  
	MODBUS_USER_CAL_POINT, 
	MODBUS_USER_CAL_PR0,
	MODBUS_USER_CAL_AD0, 				//740
	MODBUS_USER_CAL_PR9 = MODBUS_USER_CAL_PR0 + 18,
	MODBUS_USER_CAL_AD9, 
	MODBUS_SENSOR_STATUS,				//760
	MODBUS_SENSOR_TEST0,
	MODBUS_SENSOR_TEST1,
	MODBUS_SENSOR_TEST2,
	MODBUS_PRESSURE_VALUE_AD  ,
	MODBUS_PRESSURE_TEMPER_AD,
	MODBUS_PRESSURE_VALUE,
	MODBUS_PRESSURE_TEMPER,
	MODBUS_PRESSURE_STATUS,
	MODBUS_PRESSURE_READ_ENABLE,
	MODBUS_PRESSURE_READ_ALL,
	MODBUS_PRESSURE_READ_ONLY,
	MODBUS_PRESSURE_OFFSET,
	MODBUS_REPLY_DELAY,
	MODBUS_RECEIVE_DELAY,
	MODBUS_UART1_PARITY,
	MODBUS_PID1_MODE	=800,//1=COOL MODE,0=HEAT MODE	 
	MODBUS_PID1_SETPOINT, 
	MODBUS_PID1_PTERM,
	MODBUS_PID1_ITERM,
	MODBUS_PID1_PID,
	MODBUS_PID2_MODE	=810,//1=COOL MODE,0=HEAT MODE	 
	MODBUS_PID2_SETPOINT, 
	MODBUS_PID2_PTERM,
	MODBUS_PID2_ITERM,
	MODBUS_PID2_PID,
	MODBUS_PID3_MODE	=820,//1=COOL MODE,0=HEAT MODE	 
	MODBUS_PID3_SETPOINT, 
	MODBUS_PID3_PTERM,
	MODBUS_PID3_ITERM,
	MODBUS_PID3_PID,
	MODBUS_MODE_SELECT  =830,//0 = TRANSMIT, 1 = PID,
	

	MODBUS_INT_TEMPRATURE_FILTER  ,  
	MODBUS_TEMPERATURE_SENSOR_SELECT ,
	
	MODBUS_INTERNAL_TEMPERATURE_CELSIUS,
	MODBUS_INTERNAL_TEMPERATURE_FAHRENHEIT,

	MODBUS_TEMPERATURE_OFFSET_INTERNAL,  
	MODBUS_CO2_INTERNAL_EXIST,  
	MODBUS_CO2_INTERNAL,
	MODBUS_CO2_INTERNAL_OFFSET,
	MODBUS_CO2_INTERNAL_PREALARM_SETPOINT,
	MODBUS_CO2_INTERNAL_ALARM_SETPOINT, 
	MODBUS_CO2_EXTERNAL_START, // 215
	MODBUS_CO2_EXTERANL_END,// = MODBUS_CO2_EXTERNAL_START + MAX_EXT_CO2, // 215 + 254
	MODBUS_CO2_EXTERNAL_OFFSET_START,// = MODBUS_CO2_EXTERANL_END, // 469
	MODBUS_CO2_EXTERNAL_OFFSET_END ,//= MODBUS_CO2_EXTERNAL_OFFSET_START + MAX_EXT_CO2, // 469 + 254
	MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_START,// = MODBUS_CO2_EXTERNAL_OFFSET_END, // 723
	MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_END,// = MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_START + MAX_EXT_CO2, // 723 + 254
	MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_START,// = MODBUS_CO2_EXTERNAL_PREALARM_SETPOINT_END, // 977
	MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_END,// = MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_START + MAX_EXT_CO2, // 977 + 254

	MODBUS_CO2_SLOPE_DETECT_VALUE,// = MODBUS_CO2_EXTERNAL_ALARM_SETPOINT_END,	// 1231
	MODBUS_CO2_FILTER,		// 1232

	MODBUS_PASSWORD_ENABLE = 1233,	// 1233
	MODBUS_USER_PASSWORD0, 					
	MODBUS_USER_PASSWORD1,
	MODBUS_USER_PASSWORD2,
	MODBUS_USER_PASSWORD3,

	MODBUS_RTC_CENTURY, // 1238
	MODBUS_RTC_YEAR,
	MODBUS_RTC_MONTH,
	MODBUS_RTC_DAY,
	MODBUS_RTC_WEEK,
	MODBUS_RTC_HOUR,
	MODBUS_RTC_MINUTE,
	MODBUS_RTC_SECOND,

	MODBUS_ALARM_AUTO_MANUAL,	// 1246, bit7: 0 = auto, 1 = manual; bit0:1 = pre_alarm; bit1: 1 = continuous_alarm; bit(1:0): 00 = stop_ alarm		
	MODBUS_PRE_ALARM_SETTING_ON_TIME,
	MODBUS_PRE_ALARM_SETTING_OFF_TIME,
	MODBUS_ALARM_DELAY_TIME,

	MODBUS_OUTPUT_AUTO_MANUAL_SPARE = 1250,		// 1250
	MODBUS_OUTPUT_MANUAL_VALUE_TEM_SPARE,
	MODBUS_OUTPUT_MANUAL_VALUE_HUM_SPARE,
	MODBUS_OUTPUT_MANUAL_VALUE_CO2_SPARE,

	MODBUS_OUTPUT_MODE_SPARE1,				// 1254
	MODBUS_OUTPUT_RANGE_MIN_TEM_SPARE,	// 1255				
	MODBUS_OUTPUT_RANGE_MAX_TEM_SPARE,
	MODBUS_OUTPUT_RANGE_MIN_HUM_SPARE,				
	MODBUS_OUTPUT_RANGE_MAX_HUM_SPARE,
	MODBUS_OUTPUT_RANGE_MIN_CO2_SPARE,				
	MODBUS_OUTPUT_RANGE_MAX_CO2_SPARE,

	MODBUS_MENU_BLOCK_SECONDS,		// 1261
	MODBUS_BACKLIGHT_KEEP_SECONDS,

	MODBUS_EXTERNAL_NODES_PLUG_AND_PLAY, // 1263

	MODBUS_SCAN_DB_CTR,		// 1264
	MODBUS_RESET_SCAN_DB,					
	MODBUS_SCAN_START,		// 1266						
	MODBUS_SCAN_END,// = MODBUS_SCAN_START + SCAN_DB_SIZE * MAX_EXT_CO2,	// 1266 + 5*254

	MODBUS_GET_NODES_PARA_START,// = MODBUS_SCAN_END,						// 2536
	MODBUS_GET_NODES_PARA_END,// = MODBUS_GET_NODES_PARA_START + 32,		// 2536 + 32

	MODBUS_SCAN_OCCUPY_START,// = MODBUS_GET_NODES_PARA_END,				// 2568
	MODBUS_SCAN_OCCUPY_END,// = MODBUS_SCAN_OCCUPY_START + 32,				// 2568 + 32

	MODBUS_SCAN_ONLINE_START,// = MODBUS_SCAN_OCCUPY_END,					// 2600
	MODBUS_SCAN_ONLINE_END,// = MODBUS_SCAN_ONLINE_START + 32,				// 2600 + 32

	MODBUS_IDLE_ID = MODBUS_SCAN_ONLINE_END,							//2632
	
	
	
	MODBUS_AD_OUTPUT_FB_HUM = 3061, // 3061
	MODBUS_AD_OUTPUT_FB_TEMP,       //   
	MODBUS_AD_OUTPUT_FB_CO2,        //  
	MODBUS_AD_INTERNAL_TEMP,		//
	MODBUS_AD_PRE,					// 3065
	MODBUS_OUTPUT_HUM,              // 3066
	MODBUS_OUTPUT_TEMP,             //  
	MODBUS_OUTPUT_CO2,              // 
	MODBUS_HUM_SENSOR_STATE,		//3069
	MODBUS_OUTPUT_HUM_VOL_OFFSET,	//3070
	MODBUS_OUTPUT_TEMP_VOL_OFFSET,	
	MODBUS_OUTPUT_CO2_VOL_OFFSET,	//3072
	MODBUS_OUTPUT_HUM_CUR_OFFSET,	//3073
	MODBUS_OUTPUT_TEMP_CUR_OFFSET,
	MODBUS_OUTPUT_CO2_CUR_OFFSET,	//3075
	
	
	
	
	
	
	
	
 
	MODBUS_RESET = 5000,
	MODBUS_TEST0	,
	MODBUS_TEST1	,
	MODBUS_TEST2   ,
	MODBUS_TEST3   ,
	MODBUS_TEST4   ,
	MODBUS_TEST5   ,
	MODBUS_TEST6   ,

	MODBUS_TEST7   ,
	MODBUS_TEST8   ,
	MODBUS_TEST9   ,
	MODBUS_TEST10  ,
	MODBUS_TEST11  ,
	MODBUS_TEST12  ,
	MODBUS_TEST13  ,
	MODBUS_TEST14  ,
	MODBUS_TEST15  ,
	MODBUS_TEST16  ,
	MODBUS_TEST17  ,
	MODBUS_TEST18  ,
	MODBUS_TEST19  ,
	
	
	
MODBUS_USER_BLOCK_FIRST = 9999 ,
	 
	MODBUS_OUTPUT_BLOCK_FIRST = 10000,      
	MODBUS_OUTPUT_BLOCK_LAST  = MODBUS_OUTPUT_BLOCK_FIRST + MAX_OUTS * ((sizeof(Str_out_point) + 1)/ 2) - 1,
	
	MODBUS_INPUT_BLOCK_FIRST  =  MODBUS_OUTPUT_BLOCK_FIRST + 64 * ((sizeof(Str_out_point) + 1)/ 2),
	MODBUS_INPUT_BLOCK_LAST   = MODBUS_INPUT_BLOCK_FIRST + MAX_INS * ((sizeof(Str_in_point) + 1) / 2) - 1,

	MODBUS_VAR_BLOCK_FIRST    = MODBUS_INPUT_BLOCK_FIRST + 64 * ((sizeof(Str_in_point) + 1) / 2),
	MODBUS_VAR_BLOCK_LAST     = MODBUS_VAR_BLOCK_FIRST + MAX_AVS * ((sizeof(Str_variable_point) + 1) / 2) - 1,
	
	MODBUS_PRG_BLOCK_FIRST    = MODBUS_VAR_BLOCK_FIRST + 128 * ((sizeof(Str_variable_point) + 1) / 2),
	MODBUS_PRG_BLOCK_LAST     = MODBUS_PRG_BLOCK_FIRST + MAX_PRGS * ((sizeof(Str_program_point) + 1) / 2) - 1,
		
	MODBUS_WR_BLOCK_FIRST     = MODBUS_PRG_BLOCK_FIRST + 16 * ((sizeof(Str_program_point) + 1) / 2),
	MODBUS_WR_BLOCK_LAST      = MODBUS_WR_BLOCK_FIRST + MAX_WR * ((sizeof(Str_weekly_routine_point) + 1) / 2) - 1,
		
	MODBUS_AR_BLOCK_FIRST     = MODBUS_WR_BLOCK_FIRST + 8 * ((sizeof(Str_weekly_routine_point) + 1) / 2),
	MODBUS_AR_BLOCK_LAST      = MODBUS_AR_BLOCK_FIRST + MAX_AR * ((sizeof(Str_annual_routine_point) + 1) / 2) - 1,
		
	MODBUS_CODE_BLOCK_FIRST   = MODBUS_AR_BLOCK_FIRST + 4 * ((sizeof(Str_annual_routine_point) + 1) / 2),
	MODBUS_CODE_BLOCK_LAST    = MODBUS_CODE_BLOCK_FIRST + MAX_PRGS * (CODE_ELEMENT * MAX_CODE / 2) - 1,
	
	//16044 - 32043// 1000*16 
	MODBUS_WR_TIME_FIRST      = MODBUS_CODE_BLOCK_FIRST + 16 * (CODE_ELEMENT * MAX_CODE / 2), 
	MODBUS_WR_TIME_LAST       = MODBUS_WR_TIME_FIRST + MAX_WR * ((sizeof(Wr_one_day) * MAX_SCHEDULES_PER_WEEK + 1) / 2) - 1,
 
	//32044 - 32619  //576
	MODBUS_AR_TIME_FIRST      = MODBUS_WR_TIME_FIRST + 8 * ((sizeof(Wr_one_day) * MAX_SCHEDULES_PER_WEEK + 1) / 2), 
	MODBUS_AR_TIME_LAST       = MODBUS_AR_TIME_FIRST + MAX_AR * (AR_DATES_SIZE / 2) - 1,

	//32620
	MODBUS_CONTROLLER_BLOCK_FIRST = MODBUS_AR_TIME_FIRST + 4 * (AR_DATES_SIZE / 2),
	MODBUS_CONTROLLER_BLOCK_LAST  = MODBUS_CONTROLLER_BLOCK_FIRST + MAX_CONS * ((sizeof(Str_controller_point) + 1)/ 2) - 1,
	
	MODBUS_USER_BLOCK_LAST ,  

} 
MODBUS_REGISTER_LIST;


#endif






















































 




#endif
